{
  "name": "CFScript",
  "scopeName": "embedding.cfscript",
  "patterns": [
    {
      "contentName": "source.cfml.script",
      "patterns": [
        {
          "include": "#source-cfml-script"
        }
      ]
    }
  ],
  "repository": {
    "source-cfml-script-support-call": {
      "patterns": [
        {
          "name": "meta.function-call.support.cfml meta.function-call.support.createcomponent.cfml",
          "begin": "(?i)\\b(createobject)(\\()(?=(?:\\s*type\\s*=)?\\s*[\"']component[\"']\\s*,)",
          "beginCaptures": {
            "1": {
              "name": "support.function.cfml"
            },
            "2": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.begin.cfml"
            }
          },
          "contentName": "meta.function-call.parameters.support.cfml",
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "punctuation.separator.function-call.support.cfml",
              "match": ","
            },
            {
              "include": "#source-cfml-script-support-call-parameter"
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "name": "meta.function-call.support.cfml meta.function-call.support.createjavaobject.cfml",
          "begin": "(?i)\\b(createobject)\\s*(\\()(?=(?:\\s*type\\s*=)?\\s*[\"']java[\"']\\s*,)",
          "beginCaptures": {
            "1": {
              "name": "support.function.cfml"
            },
            "2": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.begin.cfml"
            }
          },
          "contentName": "meta.function-call.parameters.support.cfml",
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "punctuation.separator.function-call.support.cfml",
              "match": ","
            },
            {
              "include": "#source-cfml-script-support-call-parameter"
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "name": "meta.function-call.support.cfml",
          "begin": "(?i)\\b(queryexecute)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.cfml"
            },
            "2": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.begin.cfml"
            }
          },
          "contentName": "meta.function-call.parameters.support.cfml",
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.end.cfml"
            }
          },
          "patterns": [
            {
              "begin": "(?i)(?<=queryexecute\\()",
              "end": "(?=[,)])",
              "patterns": [
                {
                  "include": "#source-cfml-script-sql-string"
                },
                {
                  "include": "#source-cfml-script-queryexecute-parameter"
                },
                {
                  "include": "#source-cfml-script-support-call-parameter"
                },
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            },
            {
              "name": "punctuation.separator.function-call.support.cfml",
              "match": ","
            },
            {
              "include": "#source-cfml-script-queryexecute-parameter"
            },
            {
              "include": "#source-cfml-script-support-call-parameter"
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "name": "meta.function-call.support.cfml",
          "begin": "(?x)\\b\n(?i:\n    (abs|acos|addsoaprequestheader\n    |addsoapresponseheader|ajaxlink|ajaxonload|applicationstarttime|applicationstop\n    |array(?:append|avg|clear|contains|containsnocase|delete|deleteat|deletenocase|each\n    |every|filter|find|findall|findallnocase|findnocase|first|indexexists|insertat|isdefined\n    |isempty|last|len|map|max|median|merge|mid|min|new|prepend|reduce|resize|reverse\n    |set|slice|some|sort|sum|swap|tolist|tostruct)?|asc|asin|atn|beat|binarydecode|binaryencode|bitand|bitmaskclear|bitmaskread|bitmaskset\n    |bitnot|bitor|bitshln|bitshrn|bitxor|booleanformat|bundleinfo|cache(?:clear|count|delete|get|getall\n    |getallids|getdefaultcachename|getmetadata|getproperties|getsession|idexists|keyexists\n    |put|regionexists|regionnew|regionremove|remove|removeall|setproperties)|callstackdump|callstackget|canonicalize\n    |ceiling|cfusion_decrypt|cfusion_encrypt|charsetdecode|charsetencode|chr|cjustify\n    |collectioneach|collectionevery|collectionfilter|collectionmap|collectionreduce|collectionsome\n    |compare|comparenocase|component(?:cacheclear\n    |cachelist|info)|compress|contractpath|cos|create(?:date|datetime|dynamicproxy|guid|object|odbcdate|odbcdatetime\n    |odbctime|time|timespan|uniqueid|uuid)|date(?:add|compare|convert|diff|format|part\n    |timeformat)|entity(?:delete|load|loadbyexample|loadbypk|merge|namearray|namelist\n    |new|reload|save|toquery)|csrfgeneratetoken|csrfverifytoken\n    |ctcacheclear|ctcachelist|datasourceflushmetacache|day|dayofweek|dayofweekasstring\n    |dayofweekshortasstring|dayofyear|daysinmonth|daysinyear|de|decimalformat|decodeforhtml\n    |decodefromurl|decrementvalue|decrypt|decryptbinary|deleteclientvariable|deserialize\n    |deserializejson|deserializexml|directorycopy|directorycreate|directorydelete|directoryexists\n    |directorylist|directoryrename|directorysize|dollarformat|dotnettocftype|duplicate\n    |each|echo|empty|encodeforcss|encodefordn|encodeforhtml|encodeforhtmlattribute|encodeforjavascript\n    |encodeforldap|encodeforurl|encodeforxml|encodeforxmlattribute|encodeforxpath|encrypt\n    |encryptbinary|esapidecode|esapiencode|evaluate|exp|expandpath|extract|file(?:append\n    |close|copy|delete|exists|getmimetype|iseof|move|open\n    |read|readbinary|readline|seek|setaccessmode|setattribute\n    |setlastmodified|skipbytes|upload|uploadall|write|writeline)\n    |find|findnocase|findoneof|firstdayofmonth|fix|floor|formatbasen|generatepbkdfkey\n    |generatesecretkey|get(?:applicationmetadata|applicationsettings|authuser\n    |basetagdata|basetaglist|basetemplatepath|builtinfunction|canonicalpath|classpath\n    |clientvariableslist|componentmetadata|contextroot|cpuusage|currentcontext|currenttemplatepath\n    |directoryfrompath|encoding|exception|filefrompath|fileinfo|freespace|functioncalledname\n    |functiondata|functionkeywords|functionlist|gatewayhelper|httprequestdata|httptimestring\n    |locale|localedisplayname|localeinfo|localhostip|luceeid\n    |memoryusage|metadata|metricdata|numericdate|pagecontext|printerinfo|printerlist\n    |profilesections|profilestring|readableimageformats|safehtml|soaprequest|soaprequestheader\n    |soapresponse|soapresponseheader|systemfreememory|systemtotalmemory|tagdata|taglist\n    |tempdirectory|tempfile|tickcount|timezone|timezoneinfo|token|totalspace\n    |userroles|variable|vfsmetadata|writeableimageformats)|hash|hash40|hmac|hour|htmlcodeformat|htmleditformat|htmlparse\n    |iif|image(?:addborder|blur|clearrect\n    |copy|createcaptcha|crop|drawarc|drawbeveledrect|drawcubiccurve|drawimage|drawline\n    |drawlines|drawoval|drawpoint|drawquadraticcurve|drawrect|drawroundrect|drawtext\n    |filter|filtercolormap|filtercurves|filterkernel|filterwarpgrid|flip|fonts|formats\n    |getblob|getbufferedimage|getexifmetadata|getexiftag|getheight|getiptcmetadata|getiptctag\n    |getmetadata|getwidth|grayscale|info|makecolortransparent|maketranslucent|negative\n    |new|overlay|paste|read|readbase64|resize|rotate|rotatedrawingaxis|scaletofit|setantialiasing\n    |setbackgroundcolor|setdrawingalpha|setdrawingcolor|setdrawingstroke|setdrawingtransparency\n    |sharpen|shear|sheardrawingaxis|translate|translatedrawingaxis|write|writebase64\n    |xordrawingmode)|incrementvalue|inputbasen|insert|int|invalidateoauthaccesstoken|invoke|is(?:array|binary|boolean|closure|customfunction|date|dateobject|ddx|debugmode\n    |defined|empty|fileobject|image|imagefile|instanceof|ipinrange|ipv6|json|leapyear\n    |localhost|notmap|null|numeric|numericdate|object|pdfarchive|pdffile|pdfobject|query|safehtml\n    |simplevalue|soaprequest|spreadsheetfile|spreadsheetobject|struct|userinanyrole|userinrole\n    |userloggedin|valid|validoauthaccesstoken|videofile|wddx|xml|xmlattribute|xmldoc\n    |xmlelem|xmlnode|xmlroot|zipfile)|javacast\n    |jsstringformat|lcase|left|len|list(?:append|avg|changedelims|compact|contains\n    |containsnocase|deleteat|each|every|filter|find|findnocase|first|getat|indexexists\n    |insertat|itemtrim|last|len|map|prepend|qualify|reduce|removeduplicates|rest|setat\n    |some|sort|toarray|trim|valuecount|valuecountnocase)|ljustify|location|log|log10|lscurrencyformat|lsdateformat\n    |lsdatetimeformat|lsdayofweek|lseurocurrencyformat|lsiscurrency|lsisdate|lsisnumeric\n    |lsnumberformat|lsparsecurrency|lsparsedatetime|lsparseeurocurrency|lsparsenumber\n    |lstimeformat|lsweek|ltrim|max|metaphone|mid|millisecond|min|minute|month|monthasstring\n    |monthshortasstring|newline|now|nowserver|nullvalue|numberformat|object(?:equals|load|save)|onapplicationend\n    |onapplicationstart|onerror|onmissingmethod|onmissingtemplate|onrequest|onrequestend\n    |onrequeststart|onserverstart|onsessionend|onsessionstart|orm(?:clearsession\n    |closeallsessions|closesession|evictcollection|evictentity|evictqueries|executequery\n    |flush|flushall|getsession|getsessionfactory|index|indexpurge|reload|search|searchoffline)\n    |pagepoolclear|pagepoollist|paragraphformat\n    |parsedatetime|parsenumber|pi|precisionevaluate|preservesinglequotes\n    |quarter|query(?:addcolumn|addrow|columnarray|columncount|columndata|columnexists|columnlist\n    |convertforgrid|currentrow|deletecolumn|deleterow|each|every|execute|filter|getcell\n    |getresult|getrow|keyexists|map|new|recordcount|reduce|rowdata|setcell|slice|some|sort)?|quotedvaluelist|rand|randomize|randrange|reescape|refind|refindnocase\n    |releasecomobject|rematch|rematchnocase|removecachedquery|removechars|render|repeatstring\n    |replace(?:list\n    |listnocase|nocase)?|rereplace|rereplacenocase|restdeleteapplication|restinitapplication|restsetresponse\n    |reverse|right|rjustify|round|rtrim|second|sendgatewaymessage|serialize|serializejson\n    |serializexml|sessiongetmetadata|sessioninvalidate|sessionrotate|sessionstarttime\n    |setencoding|setlocale|setprofilestring|settimezone|setvariable|sgn|sin|sizeof|sleep\n    |soundex|spanexcluding|spanincluding|spreadsheet(?:addautofilter|addcolumn|addfreezepane|addimage|addinfo|addpagebreaks\n    |addrow|addrows|addsplitpane|createsheet|deletecolumn|deletecolumns|deleterow|deleterows\n    |formatcell|formatcellrange|formatcolumn|formatcolumns|formatrow|formatrows|getcellcomment\n    |getcellformula|getcellvalue|getcolumncount|info|mergecells|new|read|readbinary|removesheet|setactivesheet\n    |setactivesheetnumber|setcellcomment|setcellformula|setcellvalue|setcolumnwidth|setfooter\n    |setheader|setrowheight|shiftcolumns|shiftrows|write)|sqr|sslcertificateinstall|sslcertificatelist\n    |store(?:addacl|getacl|getmetadata\n    |setacl|setmetadata)|stringlen|stripcr|struct(?:append|clear|copy|count|delete|each|every|filter|find\n    |findkey|findvalue|get|insert|isempty|keyarray|keyexists|keylist|keytranslate|map\n    |new|reduce|some|sort|update)|systemcacheclear|systemoutput|tan|threadjoin|threadterminate|throw\n    |timeformat|to(?:base64|binary|numeric|script|string)|trace|transaction(?:commit\n    |rollback|setsavepoint)|trim|truefalseformat|ucase|ucfirst|unserializejava|url(?:decode|encode|encodedformat|sessionformat)|val|valuearray\n    |valuelist|verifyclient|week|wrap|writebody|writedump|writelog|writeoutput|wsgetallchannels\n    |wsgetsubscribers|wspublish|wssendmessage|xml(?:childpos\n    |elemnew|format|getnodetype|new|parse|search|transform|validate)|year|yesnoformat)\n  )\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.cfml"
            },
            "2": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.begin.cfml"
            }
          },
          "contentName": "meta.function-call.parameters.support.cfml",
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "punctuation.separator.function-call.support.cfml",
              "match": ","
            },
            {
              "include": "#source-cfml-script-support-call-parameter"
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "name": "meta.function-call.support.cfml",
          "begin": "(?i)\\b(getk2serverdoccount|getk2serverdoccountlimit|gettemplatepath|isk2serverabroker|isk2serverdoccountexceeded|isk2serveronline|parameterexists)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.cfml invalid.deprecated.function.cfml"
            },
            "2": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.begin.cfml"
            }
          },
          "contentName": "meta.function-call.parameters.support.cfml",
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "punctuation.separator.function-call.support.cfml",
              "match": ","
            },
            {
              "include": "#source-cfml-script-support-call-parameter"
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        }
      ]
    },
    "source-cfml-script-variable": {
      "patterns": [
        {
          "include": "#source-cfml-script-cfml-scopes"
        },
        {
          "name": "entity.name.class.cfml",
          "match": "[_$a-zA-Z][$\\w.]*(?=\\s*::)"
        },
        {
          "name": "variable.other.struct.cfml",
          "match": "[_$a-zA-Z][$\\w]*(?=\\s*[\\[\\.])"
        },
        {
          "name": "variable.other.constant.cfml",
          "match": "[_$A-Z][_$\\dA-Z]*\\b"
        },
        {
          "name": "variable.other.readwrite.cfml",
          "match": "[_$a-zA-Z][$\\w]*"
        }
      ]
    },
    "source-cfml-script-struct-literal-function-keys": {
      "patterns": [
        {
          "name": "meta.function.declaration.cfml variable.struct-literal.key.cfml string.quoted.single.cfml",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cfml"
            }
          },
          "contentName": "entity.name.function.cfml",
          "end": "(')(?!')",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.quote.cfml",
              "match": "''"
            },
            {
              "include": "#source-cfml-script-hash-delimiters"
            }
          ]
        },
        {
          "name": "meta.function.declaration.cfml variable.struct-literal.key.cfml string.quoted.double.cfml",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cfml"
            }
          },
          "contentName": "entity.name.function.cfml",
          "end": "(\")(?!\")",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.quote.cfml",
              "match": "\"\""
            },
            {
              "include": "#source-cfml-script-hash-delimiters"
            }
          ]
        },
        {
          "name": "meta.function.declaration.cfml variable.struct-literal.key.cfml entity.name.function.cfml",
          "match": "[_$a-zA-Z][$\\w]*"
        },
        {
          "name": "meta.function.declaration.cfml punctuation.separator.key-value.cfml",
          "match": "(=|:)"
        }
      ]
    },
    "source-sql": {
      "comment": "https://github.com/Microsoft/vscode/commit/e9d793eb3330e16031afc16d8c47f233923e6ddd",
      "patterns": [
        {
          "name": "keyword.other.sql",
          "match": "\\b(?i)(abort|abort_after_wait|absent|absolute|accent_sensitivity|acceptable_cursopt|acp|action|activation|address|admin|aes_128|aes_192|aes_256|affinity|after|aggregate|algorithm|all_constraints|all_errormsgs|all_indexes|all_levels|all_results|allow_connections|allow_dup_row|allow_encrypted_value_modifications|allow_page_locks|allow_row_locks|allow_snapshot_isolation|altercolumn|always|anonymous|ansi_defaults|ansi_null_default|ansi_null_dflt_off|ansi_null_dflt_on|ansi_nulls|ansi_padding|ansi_warnings|appdomain|append|application|apply|arithabort|arithignore|assembly|asymmetric|asynchronous_commit|at|atan2|atomic|attach|attach_force_rebuild_log|attach_rebuild_log|audit|auth_realm|authentication|auto|auto_cleanup|auto_close|auto_create_statistics|auto_shrink|auto_update_statistics|auto_update_statistics_async|automated_backup_preference |automatic|autopilot|availability|availability_mode|backup_priority|base64|basic|batches|batchsize|before|bigint|binary|binding|bit|block|blocksize|bmk|broker|broker_instance|bucket_count|buffer|buffercount|bulk_logged|by|call|caller|card|case|cast|catalog|catch|cert|certificate|change_retention|change_tracking|change_tracking_context|changes|char|character|character_set|check_expiration|check_policy|checkconstraints|checkindex|checkpoint|cleanup_policy|clear|clear_port|codepage|collection|column_encryption_key|column_master_key|columnstore|columnstore_archive|colv_80_to_100|colv_100_to_80|commit_differential_base|committed|compatibility_level|compress_all_row_groups|compression|compression_delay|concat_null_yields_null|concatenate|configuration|connect|continue_after_error|contract|contract_name|control|conversation|conversation_group_id|conversation_handle|copy|copy_only|count_rows|counter|create|credential|cross|cryptographic|cryptographic_provider|cube|cursor_close_on_commit|cursor_default|data|data_compression|data_flush_interval_seconds|data_mirroring|data_purity|data_source|database|database_name|database_snapshot|datafiletype|date_correlation_optimization|date|datefirst|dateformat|date_format|datetime|datetime2|datetimeoffset|days|db_chaining|dbid|dbidexec|dbo_only|deadlock_priority|dec|decimal|declare|decrypt|decrypt_a|decryption|default_database|default_language|default_logon_domain|default_schema|definition|delay|delayed_durability|delimitedtext|density_vector|dependent|des|description|desired_state|desx|differential|digest|disable|disable_broker|disable_def_cnst_chk|disabled|disk|distribution|drop|drop_existing|dts_buffers|dump|durability|dynamic|edition|elements|else|emergency|empty|enable|enable_broker|enabled|encoding|encrypted|encrypted_value|encryption|encryption_type|end|endpoint|endpoint_url|enhancedintegrity|entry|error_broker_conversations|errorfile|estimateonly|event|exec|executable|exists|expand|expiredate|expiry_date|explicit|external_access|failover|failover_mode|failure_condition_level|fast|fast_forward|fastfirstrow|federated_service_account|field_terminator|fieldterminator|file|filelistonly|filegroup|filename|filestream|filestream_log|filestream_on|filetable|file_format|filter|fips_flagger|fire_triggers|first|firstrow|float|flush_interval_seconds|fmtonly|following|force|force_failover_allow_data_loss|force_service_allow_data_loss|forced|forceplan|formatfile|format_options|format_type|formsof|forward_only|free_cursors|free_exec_context|fullscan|fulltext|fulltextall|fulltextkey|function|generated|get|geography|geometry|global|go|governor|guid|hadoop|hardening|hash|hashed|header_limit|headeronly|health_check_timeout|hidden|hierarchyid|histogram|histogram_steps|hits_cursors|hits_exec_context|hours|http|identity_value|if|ifnull|ignore_constraints|ignore_dup_key|ignore_dup_row|ignore_triggers|image|immediate|implicit_transactions|include|include_null_values|inflectional|init|initiator|insensitive|insert|instead|int|integer|integrated|intermediate|interval_length_minutes|into|inuse_cursors|inuse_exec_context|io|is|isabout|iso_week|isolation|job_tracker_location|json|keep|keep_nulls|keep_replication|keepdefaults|keepfixed|keepidentity|keepnulls|kerberos|key|key_path|key_source|key_store_provider_name|keyset|kilobytes_per_batch|labelonly|langid|language|last|lastrow|legacy_cardinality_estimation|length|level|lifetime|lineage_80_to_100|lineage_100_to_80|listener_ip|listener_port|load|loadhistory|lob_compaction|local|local_service_name|locate|location|lock_escalation|lock_timeout|lockres|login|login_type|loop|manual|mark_in_use_for_removal|masked|master|max_queue_readers|max_duration|max_outstanding_io_per_volume|maxdop|maxerrors|maxlength|maxtransfersize|max_plans_per_query|max_storage_size_mb|mediadescription|medianame|mediapassword|memogroup|memory_optimized|merge|message|message_forward_size|message_forwarding|microsecond|millisecond|minutes|mirror_address|misses_cursors|misses_exec_context|mixed|modify|money|move|multi_user|must_change|name|namespace|nanosecond|native|native_compilation|nchar|ncharacter|never|new_account|new_broker|newname|next|no|no_browsetable|no_checksum|no_compression|no_infomsgs|no_triggers|no_truncate|nocount|noexec|noexpand|noformat|noinit|nolock|nonatomic|nondurable|none|norecompute|norecovery|noreset|norewind|noskip|not|notification|nounload|now|nowait|ntext|ntlm|numeric|numeric_roundabort|nvarchar|object|objid|oem|offline|old_account|online|operation_mode|openjson|optimistic|option|orc|out|outer|output|over|override|owner|ownership|pad_index|page|page_checksum|page_verify|pagecount|paglock|param|parameter_sniffing|parameter_type_expansion|parameterization|parquet|parseonly|partial|partition|partner|password|path|pause|percentage|permission_set|persisted|period|physical_only|plan_forcing_mode|policy|pool|population|ports|preceding|precision|predicate|presume_abort|primary|primary_role|print|prior|priority |priority_level|private|procedure_name|profile|provider|query_capture_mode|query_governor_cost_limit|query_optimizer_hotfixes|query_store|queue|quoted_identifier|range|raw|rcfile|rc2|rc4|rc4_128|rdbms|read_committed_snapshot|read|read_only|read_write|readcommitted|readcommittedlock|readonly|readpast|readuncommitted|readwrite|real|rebuild|receive|recmodel_70backcomp|recompile|recovery|recursive|recursive_triggers|redo_queue|reject_sample_value|reject_type|reject_value|relative|remote|remote_data_archive|remote_proc_transactions|remote_service_name|remove|removed_cursors|removed_exec_context|reorganize|repeat|repeatable|repeatableread|replica|replicated|replnick_100_to_80|replnickarray_80_to_100|replnickarray_100_to_80|required|required_cursopt|resample|reset|resource|resource_manager_location|restart|restore|restricted_user|resume|retaindays|retention|return|rewind|rewindonly|returns|robust|role|rollup|root|round_robin|route|row|rowdump|rowlock|row_terminator|rows|rows_per_batch|rowsets_only|rowterminator|rowversion|rsa_1024|rsa_2048|rsa_3072|rsa_4096|rsa_512|safe|safety|sample|schemabinding|scoped|scroll|scroll_locks|sddl|secexpr|secondary|secondary_only|secondary_role|secret|security|securityaudit|selective|self|send|sent|sequence|serde_method|serializable|server|service|service_broker|service_name|service_objective|session_timeout|session|sessions|seterror|setopts|sets|shard_map_manager|shard_map_name|sharded|shared_memory|show_statistics|showplan_all|showplan_text|showplan_xml|showplan_xml_with_recompile|shrinkdb|sid|signature|simple|single_blob|single_clob|single_nclob|single_user|singleton|site|size_based_cleanup_mode|skip|smalldatetime|smallint|smallmoney|snapshot|snapshot_import|snapshotrestorephase|soap|softnuma|sort_in_tempdb|sorted_data|sorted_data_reorg|spatial|sql|sql_bigint|sql_binary|sql_bit|sql_char|sql_date|sql_decimal|sql_double|sql_float|sql_guid|sql_handle|sql_longvarbinary|sql_longvarchar|sql_numeric|sql_real|sql_smallint|sql_time|sql_timestamp|sql_tinyint|sql_tsi_day|sql_tsi_frac_second|sql_tsi_hour|sql_tsi_minute|sql_tsi_month|sql_tsi_quarter|sql_tsi_second|sql_tsi_week|sql_tsi_year|sql_type_date|sql_type_time|sql_type_timestamp|sql_varbinary|sql_varchar|sql_variant|sql_wchar|sql_wlongvarchar|ssl|ssl_port|standard|standby|start|start_date|started|stat_header|state|statement|static|statistics|statistics_incremental|statistics_norecompute|statistics_only|statman|stats_stream|status|stop|stop_on_error|stopat|stopatmark|stopbeforemark|stoplist|stopped|string_delimiter|subject|supplemental_logging|supported|suspend|symmetric|synchronous_commit|synonym|sysname|system|system_time|system_versioning|table|tableresults|tablock|tablockx|take|tape|target|target_index|target_partition|tcp|temporal_history_retention|text|textimage_on|then|thesaurus|throw|time|timeout|timestamp|tinyint|to|top|torn_page_detection|track_columns_updated|tran|transaction|transfer|triple_des|triple_des_3key|trustworthy|try|tsql|type|type_desc|type_warning|tzoffset|uid|unbounded|uncommitted|uniqueidentifier|unlimited|unload|unlock|unsafe|updlock|url|use|useplan|useroptions|use_type_default|using|utcdatetime|valid_xml|validation|value|values|varbinary|varchar|verbose|verifyonly|version|view_metadata|virtual_device|visiblity|webmethod|weekday|weight|well_formed_xml|when|widechar|widechar_ansi|widenative|windows|with|within|witness|without|without_array_wrapper|workload|wsdl|xact_abort|xlock|xml|xmlschema|xquery|xsinil|zone)\\b"
        },
        {
          "include": "#source-sql-comments"
        },
        {
          "name": "meta.create.sql",
          "match": "(?i:^\\s*(create(?:\\s+or\\s+replace)?)\\s+(aggregate|conversion|database|domain|function|group|(?:unique\\s+)?index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\\s+)(['\"`]?)(\\w+)\\3",
          "captures": {
            "1": {
              "name": "keyword.other.create.sql"
            },
            "2": {
              "name": "keyword.other.sql"
            },
            "4": {
              "name": "entity.name.function.sql"
            }
          }
        },
        {
          "name": "meta.drop.sql",
          "match": "(?i:^\\s*(drop)\\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view))",
          "captures": {
            "1": {
              "name": "keyword.other.create.sql"
            },
            "2": {
              "name": "keyword.other.sql"
            }
          }
        },
        {
          "name": "meta.drop.sql",
          "match": "(?i:\\s*(drop)\\s+(table)\\s+(\\w+)(\\s+cascade)?\\b)",
          "captures": {
            "1": {
              "name": "keyword.other.create.sql"
            },
            "2": {
              "name": "keyword.other.table.sql"
            },
            "3": {
              "name": "entity.name.function.sql"
            },
            "4": {
              "name": "keyword.other.cascade.sql"
            }
          }
        },
        {
          "name": "meta.alter.sql",
          "match": "(?i:^\\s*(alter)\\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\\s+)",
          "captures": {
            "1": {
              "name": "keyword.other.create.sql"
            },
            "2": {
              "name": "keyword.other.table.sql"
            }
          }
        },
        {
          "match": "(?xi)\n\n\t\t\t\t# normal stuff, capture 1\n\t\t\t\t \\b(bigint|bigserial|bit|boolean|box|bytea|cidr|circle|date|double\\sprecision|inet|int|integer|line|lseg|macaddr|money|oid|path|point|polygon|real|serial|smallint|sysdate|text)\\b\n\n\t\t\t\t# numeric suffix, capture 2 + 3i\n\t\t\t\t|\\b(bit\\svarying|character\\s(?:varying)?|tinyint|var\\schar|float|interval)\\((\\d+)\\)\n\n\t\t\t\t# optional numeric suffix, capture 4 + 5i\n\t\t\t\t|\\b(char|number|varchar\\d?)\\b(?:\\((\\d+)\\))?\n\n\t\t\t\t# special case, capture 6 + 7i + 8i\n\t\t\t\t|\\b(numeric|decimal)\\b(?:\\((\\d+),(\\d+)\\))?\n\n\t\t\t\t# special case, captures 9, 10i, 11\n\t\t\t\t|\\b(times?)\\b(?:\\((\\d+)\\))?(\\swith(?:out)?\\stime\\szone\\b)?\n\n\t\t\t\t# special case, captures 12, 13, 14i, 15\n\t\t\t\t|\\b(timestamp)(?:(s|tz))?\\b(?:\\((\\d+)\\))?(\\s(with|without)\\stime\\szone\\b)?\n\n\t\t\t",
          "captures": {
            "1": {
              "name": "storage.type.sql"
            },
            "2": {
              "name": "storage.type.sql"
            },
            "3": {
              "name": "constant.numeric.sql"
            },
            "4": {
              "name": "storage.type.sql"
            },
            "5": {
              "name": "constant.numeric.sql"
            },
            "6": {
              "name": "storage.type.sql"
            },
            "7": {
              "name": "constant.numeric.sql"
            },
            "8": {
              "name": "constant.numeric.sql"
            },
            "9": {
              "name": "storage.type.sql"
            },
            "10": {
              "name": "constant.numeric.sql"
            },
            "11": {
              "name": "storage.type.sql"
            },
            "12": {
              "name": "storage.type.sql"
            },
            "13": {
              "name": "storage.type.sql"
            },
            "14": {
              "name": "constant.numeric.sql"
            },
            "15": {
              "name": "storage.type.sql"
            }
          }
        },
        {
          "name": "storage.modifier.sql",
          "match": "(?i:\\b((?:primary|foreign)\\s+key|references|on\\s+delete(\\s+cascade)?|check|constraint)\\b)"
        },
        {
          "name": "constant.numeric.sql",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "keyword.other.DML.sql",
          "match": "(?i:\\b(select(\\s+distinct)?|insert\\s+(ignore\\s+)?into|update|delete|from|set|where|group\\s+by|or|like|and|between|union(\\s+all)?|intersect|(except|minus)|having|order\\s+by|limit|offset|(inner|cross)\\s+join|join|straight_join|(left|right|full)(\\s+outer)?\\s+join|natural(\\s+((left|right)(\\s+outer)?|inner))?\\s+join|fetch(\\s+(next|prior|first|last|absolute|relative))?)\\b)"
        },
        {
          "name": "keyword.other.DDL.create.II.sql",
          "match": "(?i:\\b(on|off|(is\\s+(not\\s+)?)?null)\\b)"
        },
        {
          "name": "keyword.other.DML.II.sql",
          "match": "(?i:\\b(values|execute|openquery)\\b)"
        },
        {
          "name": "keyword.other.LUW.sql",
          "match": "(?i:\\b(begin(\\s+work)?|start\\s+transaction|commit(\\s+work)?|rollback(\\s+work)?)\\b)"
        },
        {
          "name": "keyword.other.authorization.sql",
          "match": "(?i:\\b(grant(\\swith\\sgrant\\soption)?|revoke)\\b)"
        },
        {
          "name": "keyword.other.data-integrity.sql",
          "match": "(?i:\\bin\\b)"
        },
        {
          "name": "keyword.other.object-comments.sql",
          "match": "(?i:^\\s*(comment\\s+on\\s+(table|column|aggregate|constraint|database|domain|function|index|operator|rule|schema|sequence|trigger|type|view))\\s+.*?\\s+(is)\\s+)"
        },
        {
          "name": "keyword.other.alias.sql",
          "match": "(?i)\\bAS\\b"
        },
        {
          "name": "keyword.other.order.sql",
          "match": "(?i)\\b(DESC|ASC)\\b"
        },
        {
          "name": "keyword.operator.star.sql",
          "match": "\\*"
        },
        {
          "name": "keyword.operator.comparison.sql",
          "match": "[!<>]?=|<>|<|>"
        },
        {
          "name": "keyword.operator.math.sql",
          "match": "-|\\+|/"
        },
        {
          "name": "keyword.operator.concatenator.sql",
          "match": "\\|\\|"
        },
        {
          "comment": "List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html",
          "name": "support.function.scalar.sql",
          "match": "(?i)\\b(CURRENT_(DATE|TIME(STAMP)?|USER)|(SESSION|SYSTEM)_USER)\\b"
        },
        {
          "comment": "List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html",
          "name": "support.function.aggregate.sql",
          "match": "(?i)\\b(AVG|COUNT|MIN|MAX|SUM)(?=\\s*\\()"
        },
        {
          "name": "support.function.string.sql",
          "match": "(?i)\\b(CONCATENATE|CONVERT|LOWER|SUBSTRING|TRANSLATE|TRIM|UPPER)\\b"
        },
        {
          "name": "support.function.other.sql",
          "match": "(?i)[a-z_@][a-z0-9_$@]*(?=\\s*\\()\\b"
        },
        {
          "match": "\\b(\\w+?)\\.(\\.)?(\\w+)\\b",
          "captures": {
            "1": {
              "name": "constant.other.database-name.sql"
            },
            "3": {
              "name": "constant.other.table-name.sql"
            }
          }
        },
        {
          "include": "#source-sql-strings"
        },
        {
          "include": "#source-sql-regexps"
        },
        {
          "comment": "Allow for special ↩ behavior",
          "name": "meta.block.sql",
          "match": "(\\()(\\))",
          "captures": {
            "1": {
              "name": "punctuation.section.scope.begin.sql"
            },
            "2": {
              "name": "punctuation.section.scope.end.sql"
            }
          }
        }
      ]
    },
    "source-sql-comments": {
      "comment": "Does not terminate properly when embedded in CFML string",
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "begin": "(^[ \\t]+)?(?=--)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.sql"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "name": "comment.line.double-dash.sql",
              "begin": "--",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.sql"
                }
              },
              "end": "\\n"
            }
          ]
        },
        {
          "name": "comment.block.sql",
          "begin": "/\\*",
          "end": "\\*/|(?=</cfquery)",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.sql"
            }
          }
        }
      ]
    },
    "source-sql-strings": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "string.quoted.single.sql",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sql"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-sql-string_escape"
            }
          ]
        },
        {
          "name": "string.quoted.other.backtick.sql",
          "begin": "`",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sql"
            }
          },
          "end": "`",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-sql-string_escape"
            }
          ]
        },
        {
          "name": "string.quoted.double.sql",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sql"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-sql-string_interpolation"
            }
          ]
        },
        {
          "name": "string.other.quoted.brackets.sql",
          "begin": "%\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sql"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-sql-string_interpolation"
            }
          ]
        }
      ]
    },
    "source-sql-string_escape": {
      "name": "constant.character.escape.sql",
      "match": "\\\\."
    },
    "source-sql-string_interpolation": {
      "captures": {
        "1": {
          "name": "punctuation.definition.string.begin.sql"
        },
        "3": {
          "name": "punctuation.definition.string.end.sql"
        }
      },
      "name": "string.interpolated.sql",
      "match": "(#\\{)([^\\}]*)(\\})"
    },
    "source-sql-regexps": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "string.regexp.sql",
          "begin": "/(?=\\S.*/)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sql"
            }
          },
          "end": "/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-sql-string_interpolation"
            },
            {
              "name": "constant.character.escape.slash.sql",
              "match": "\\\\/"
            }
          ]
        },
        {
          "comment": "We should probably handle nested bracket pairs!?! -- Allan",
          "name": "string.regexp.modr.sql",
          "begin": "%r\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sql"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-sql-string_interpolation"
            }
          ]
        }
      ]
    },
    "source-cfml-script-parens-block-scope": {
      "patterns": [
        {
          "name": "meta.group.cfml",
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.group.begin.cfml"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.group.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "include": "#source-cfml-script-block-scope"
        }
      ]
    },
    "source-cfml-script-queryexecute-parameter": {
      "patterns": [
        {
          "begin": "\\b(sql)\\s*([=:])(?!=)",
          "end": "(?=[,\\)])",
          "captures": {
            "1": {
              "name": "entity.other.parameter-name.cfml"
            },
            "2": {
              "name": "keyword.operator.assignment.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-sql-string"
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        }
      ]
    },
    "source-cfml-script-method-call": {
      "patterns": [
        {
          "include": "#source-cfml-script-support-method-call"
        },
        {
          "name": "meta.function-call.method.cfml",
          "begin": "([_$a-zA-Z][$\\w]*)\\s*(?=\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.cfml"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.parameters.method.cfml punctuation.definition.arguments.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-method-call-params"
            }
          ]
        }
      ]
    },
    "source-cfml-script-string-quoted-single": {
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "string.quoted.single.cfml punctuation.definition.string.begin.cfml"
        }
      },
      "end": "(')(?!')",
      "endCaptures": {
        "1": {
          "name": "string.quoted.single.cfml punctuation.definition.string.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "string.quoted.single.cfml constant.character.escape.quote.cfml",
          "match": "''"
        },
        {
          "name": "meta.string.quoted.single.cfml meta.embedded.block.sql source.sql",
          "begin": "(?=\\s*(?:USE|SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|REPLACE|ALTER|WITH|DECLARE|FROM|WHERE|AND|OR|NOT|EXISTS|ORDER\\s+BY|GROUP\\s+BY|HAVING|(INNER|CROSS)\\s+JOIN|(LEFT|RIGHT|FULL)(\\s+OUTER)?\\s+JOIN|UNION|INTERSECT|EXCEPT|MINUS|LIMIT|TRUNCATE\\s+TABLE|BULK\\s+INSERT)\\b)",
          "end": "(?='[^'])",
          "patterns": [
            {
              "include": "#source-cfml-sql-string-single-quoted"
            }
          ]
        },
        {
          "name": "string.quoted.single.cfml",
          "begin": "(?=\\S)",
          "end": "(?='[^'])",
          "patterns": [
            {
              "name": "constant.character.escape.quote.cfml",
              "match": "''"
            },
            {
              "include": "#source-cfml-script-hash-delimiters"
            }
          ]
        },
        {
          "name": "string.quoted.single.cfml",
          "match": "[\\s\\n]"
        }
      ]
    },
    "source-cfml-script-round-brackets": {
      "patterns": [
        {
          "name": "meta.group.cfml",
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.group.begin.cfml"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.group.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "name": "invalid.illegal.stray.brace.round.cfml",
          "match": "\\)"
        }
      ]
    },
    "source-cfml-script-component": {
      "patterns": [
        {
          "begin": "(?i)^(?=\\s*(?:(abstract|final)\\s+)?(component)\\b)",
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "meta.class.body.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "meta.class.declaration.cfml",
              "begin": "\\b(?:(abstract|final)\\s+)?(component)\\b",
              "beginCaptures": {
                "1": {
                  "name": "storage.modifier.cfml"
                },
                "2": {
                  "name": "storage.type.class.cfml"
                }
              },
              "end": "(?=\\{)",
              "patterns": [
                {
                  "include": "#source-cfml-script-comments"
                },
                {
                  "include": "#source-cfml-script-component-attributes"
                }
              ]
            },
            {
              "name": "meta.class.body.cfml",
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.block.begin.cfml"
                }
              },
              "end": "(?=})",
              "patterns": [
                {
                  "include": "#source-cfml-script-statements"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?i)^(?=\\s*(interface)\\b)",
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "meta.interface.body.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "meta.interface.declaration.cfml",
              "begin": "\\b(interface)\\b",
              "beginCaptures": {
                "1": {
                  "name": "storage.type.interface.cfml"
                }
              },
              "end": "(?=\\{)",
              "patterns": [
                {
                  "include": "#source-cfml-script-comments"
                },
                {
                  "include": "#source-cfml-script-component-attributes"
                }
              ]
            },
            {
              "name": "meta.interface.body.cfml",
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.block.begin.cfml"
                }
              },
              "end": "(?=})",
              "patterns": [
                {
                  "include": "#source-cfml-script-statements"
                }
              ]
            }
          ]
        }
      ]
    },
    "source-cfml-extends": {
      "name": "meta.class.inheritance.cfml",
      "begin": "(?i)\\b(extends|implements)\\s*(=)\\s*",
      "beginCaptures": {
        "1": {
          "name": "entity.other.attribute-name.cfml storage.modifier.$1.cfml"
        },
        "2": {
          "name": "punctuation.separator.key-value.cfml"
        }
      },
      "end": "(?<=[^\\s=])|(?=[</>{;])",
      "patterns": [
        {
          "name": "string.quoted.double.cfml",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cfml"
            }
          },
          "end": "(\")(?!\")",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.cfml"
            }
          },
          "patterns": [
            {
              "match": "[\\w$:.]+",
              "captures": {
                "0": {
                  "name": "entity.other.inherited-class.cfml"
                }
              }
            }
          ]
        },
        {
          "name": "string.quoted.single.cfml",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cfml"
            }
          },
          "end": "(')(?!')",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.cfml"
            }
          },
          "patterns": [
            {
              "match": "[\\w$:.]+",
              "captures": {
                "0": {
                  "name": "entity.other.inherited-class.cfml"
                }
              }
            }
          ]
        },
        {
          "match": "([\\w$:.]+)|(?=[^\\w$:.])",
          "captures": {
            "1": {
              "name": "string.unquoted.cfml entity.other.inherited-class.cfml"
            }
          }
        }
      ]
    },
    "source-cfml-script-static": {
      "name": "meta.block.static.cfml",
      "begin": "\\bstatic\\b(?=\\s*[\\n\\{])",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.static.cfml"
        }
      },
      "end": "(?:(\\})|(?=[^\\{\\}\\s]))",
      "endCaptures": {
        "1": {
          "name": "meta.block.static.cfml punctuation.definition.block.end.cfml"
        }
      },
      "patterns": [
        {
          "include": "#source-cfml-script-block-scope"
        }
      ]
    },
    "cfoutput-injection": {
      "patterns": [
        {
          "name": "constant.character.escape.hash.cfml",
          "match": "##"
        },
        {
          "begin": "#",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.begin.cfml"
            }
          },
          "contentName": "meta.embedded.line.cfml source.cfml.script",
          "end": "#",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script"
            }
          ]
        },
        {
          "include": "#cfml-tags"
        }
      ]
    },
    "source-cfml-script-constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.cfml",
          "match": "\\b(?i:true)\\b"
        },
        {
          "name": "constant.language.boolean.false.cfml",
          "match": "\\b(?i:false)\\b"
        },
        {
          "name": "constant.language.null.cfml",
          "match": "\\b(?i:null)\\b"
        }
      ]
    },
    "source-cfml-script-cfml-scopes": {
      "patterns": [
        {
          "name": "variable.language.super.cfml",
          "match": "\\b(?i:super)\\b"
        },
        {
          "name": "variable.language.scope.cfml",
          "match": "\\b(?i:thread)\\b(?=[\\[.])"
        },
        {
          "name": "variable.language.scope.cfml",
          "match": "(?x)\n  \\b(?i:(\n  application|arguments|attributes|caller|cgi|client|cookie|flash|form|\n  local|request|server|session|this|thistag|url|variables|self|static\n))\\b"
        }
      ]
    },
    "source-cfml-script": {
      "patterns": [
        {
          "include": "#source-cfml-script-main"
        }
      ]
    },
    "source-cfml-script-expressions": {
      "patterns": [
        {
          "include": "#source-cfml-script-comments"
        },
        {
          "include": "#source-cfml-script-string"
        },
        {
          "include": "#source-cfml-script-constructor"
        },
        {
          "include": "#source-cfml-script-operators"
        },
        {
          "include": "#source-cfml-script-keywords"
        },
        {
          "include": "#source-cfml-script-constants"
        },
        {
          "include": "#source-cfml-script-named-function"
        },
        {
          "include": "#source-cfml-script-anonymous-function"
        },
        {
          "include": "#source-cfml-script-struct-literal"
        },
        {
          "include": "#source-cfml-script-brackets"
        },
        {
          "include": "#source-cfml-script-number"
        },
        {
          "include": "#source-cfml-script-call"
        },
        {
          "include": "#source-cfml-script-variable"
        },
        {
          "include": "#source-cfml-script-punctuation"
        }
      ]
    },
    "source-cfml-script-tag-generic-attribute-script": {
      "patterns": [
        {
          "name": "meta.tag.script.cfml entity.other.attribute-name.cfml",
          "match": "\\b[a-zA-Z_][\\w:-]*\\b"
        },
        {
          "name": "meta.tag.script.cfml",
          "begin": "(=|:)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.separator.key-value.cfml"
            }
          },
          "end": "(?=\\s*\\b([a-zA-Z_][\\w:-]*)\\s*(=|:))|(?=[;\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "name": "invalid.illegal.attribute-name.cfml",
          "match": "\\S+"
        }
      ]
    },
    "source-cfml-script-constructor": {
      "name": "meta.instance.constructor.cfml",
      "begin": "(?i)\\b(new)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.new.cfml"
        }
      },
      "end": "(\\))|(?=[^_$\\w.\\(\\)])",
      "endCaptures": {
        "1": {
          "name": "meta.function-call.parameters.method.cfml punctuation.definition.arguments.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "entity.name.class.cfml",
          "match": "[_$a-zA-Z][$\\w.]*"
        },
        {
          "name": "meta.function-call.parameters.method.cfml",
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.arguments.begin.cfml"
            }
          },
          "end": "(?=\\))",
          "patterns": [
            {
              "name": "punctuation.separator.function-call.method.cfml",
              "match": ","
            },
            {
              "begin": "\\b(?i:(argumentCollection)|([_$a-zA-Z][$\\w]*))\\s*([=:])(?!=|>)",
              "beginCaptures": {
                "1": {
                  "name": "entity.other.argumentCollection.cfml"
                },
                "2": {
                  "name": "entity.other.parameter-name.cfml"
                },
                "3": {
                  "name": "keyword.operator.assignment.cfml"
                }
              },
              "end": "(?=[,\\)])",
              "patterns": [
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        }
      ]
    },
    "source-cfml-script-tag-string-quoted-single": {
      "name": "string.quoted.single.cfml",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.cfml"
        }
      },
      "end": "'(?!')",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "constant.character.escape.quote.cfml",
          "match": "''"
        },
        {
          "include": "#source-cfml-script-hash-delimiters"
        }
      ]
    },
    "source-cfml-string": {
      "patterns": [
        {
          "include": "#source-cfml-string-quoted-single"
        },
        {
          "include": "#source-cfml-string-quoted-double"
        }
      ]
    },
    "source-cfml-script-operators": {
      "patterns": [
        {
          "name": "keyword.operator.logical.cfml",
          "match": "!(?!=)"
        },
        {
          "name": "keyword.operator.decrement.cfml",
          "match": "--"
        },
        {
          "name": "keyword.operator.increment.cfml",
          "match": "\\+\\+"
        },
        {
          "begin": "\\b(?i:in)\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.expression.in.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "&&|\\|\\|",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.logical.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "\\b(?i:(not|and|or|xor|eqv|imp))\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.logical.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "=(?!=)",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.assignment.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "\\b(?i:(greater|less|than|equal\\s+to|contains|ct|does\\s+not\\s+contain|nct|equal|eq|neq|lt|lte|le|gt|gte|ge|is))\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.decision.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "%=|&=|\\*=|\\+=|-=|/=",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.assignment.compound.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "&",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.concat.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "<=|>=|<|>",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.relational.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "===?|!==?",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.comparison.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "/|%|\\*|\\+|-|\\b(?i:mod)\\b|\\^|\\\\",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.arithmetic.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "\\?:(?!:)",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.elvis.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "\\?(?!\\.)|:(?!:)",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.ternary.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        }
      ]
    },
    "source-cfml-string-quoted-single": {
      "name": "string.quoted.single.cfml",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.cfml"
        }
      },
      "end": "'(?!')",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.cfml"
        }
      },
      "patterns": [
        {
          "include": "#hash-delimiters"
        },
        {
          "name": "constant.character.escape.quote.cfml",
          "match": "''"
        }
      ]
    },
    "source-cfml-script-static-method-call": {
      "patterns": [
        {
          "name": "meta.function-call.method.static.cfml",
          "begin": "([_$a-zA-Z][$\\w]*)\\s*(?=\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.static.cfml"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.parameters.method.cfml punctuation.definition.arguments.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-method-call-params"
            }
          ]
        }
      ]
    },
    "source-cfml-script-keywords-top-level": {
      "patterns": [
        {
          "name": "meta.import.cfml",
          "begin": "(?i)\\bimport\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.import.cfml"
            }
          },
          "end": "(?=\\n|;)",
          "patterns": [
            {
              "include": "#source-cfml-script-string"
            },
            {
              "name": "variable.other.readwrite.alias.cfml",
              "match": "[_$a-zA-Z][$\\w]*"
            },
            {
              "name": "constant.language.import-all.cfml",
              "match": "\\*"
            }
          ]
        }
      ]
    },
    "source-cfml-script-sql-string": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "string.quoted.double.cfml punctuation.definition.string.begin.cfml"
            }
          },
          "contentName": "meta.string.quoted.double.cfml meta.embedded.block.sql source.sql",
          "end": "(\")(?!\")",
          "endCaptures": {
            "1": {
              "name": "string.quoted.double.cfml punctuation.definition.string.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.quote.cfml",
              "match": "\"\""
            },
            {
              "include": "#source-cfml-sql-string-double-quoted"
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "string.quoted.single.cfml punctuation.definition.string.begin.cfml"
            }
          },
          "contentName": "meta.string.quoted.single.cfml meta.embedded.block.sql source.sql",
          "end": "(')(?!')",
          "endCaptures": {
            "1": {
              "name": "string.quoted.single.cfml punctuation.definition.string.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.quote.cfml",
              "match": "''"
            },
            {
              "include": "#source-cfml-sql-string-single-quoted"
            }
          ]
        }
      ]
    },
    "source-cfml-sql-string-double-quoted": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "comment.line.double-dash.sql",
          "match": "(--)((\"\")|[^\"])*(?=\"|$)",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.sql"
            },
            "3": {
              "name": "constant.character.escape.quote.cfml"
            }
          }
        },
        {
          "name": "comment.block.sql",
          "begin": "/\\*",
          "end": "\\*/|(?=\"(?!\"))",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.sql"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.quote.cfml",
              "match": "\"\""
            }
          ]
        },
        {
          "name": "string.quoted.single.unclosed.sql",
          "match": "'(?=((\\\\')|[^'\"])*(\"|$))"
        },
        {
          "name": "string.quoted.other.backtick.unclosed.sql",
          "match": "`(?=((\\\\`)|[^`\"])*(\"|$))"
        },
        {
          "include": "#source-sql"
        },
        {
          "name": "variable.parameter.query.named.cfml",
          "match": "(?<!:)(:)([_$a-zA-Z][$\\w]*)",
          "captures": {
            "1": {
              "name": "punctuation.definition.variable.cfml"
            }
          }
        },
        {
          "name": "variable.parameter.query.positional.cfml punctuation.definition.variable.cfml",
          "match": "\\?"
        }
      ]
    },
    "source-cfml-sql-string-single-quoted": {
      "patterns": [
        {
          "name": "comment.line.double-dash.sql",
          "match": "(--)(('')|[^'])*(?='|$)",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.sql"
            },
            "3": {
              "name": "constant.character.escape.quote.cfml"
            }
          }
        },
        {
          "name": "comment.block.sql",
          "begin": "/\\*",
          "end": "\\*/|(?='(?!'))",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.sql"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.quote.cfml",
              "match": "''"
            }
          ]
        },
        {
          "name": "string.quoted.single.sql",
          "begin": "''",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sql constant.character.escape.quote.cfml"
            }
          },
          "end": "''",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.sql constant.character.escape.quote.cfml"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-sql-string_escape"
            }
          ]
        },
        {
          "name": "string.quoted.other.backtick.unclosed.sql",
          "match": "`(?=((\\\\`)|[^`'])*('|$))"
        },
        {
          "name": "string.quoted.double.unclosed.sql",
          "match": "\"(?=((\\\\\")|[^\"'])*('|$))"
        },
        {
          "include": "#source-sql"
        },
        {
          "name": "variable.parameter.query.named.cfml",
          "match": "(?<!:)(:)([_$a-zA-Z][$\\w]*)",
          "captures": {
            "1": {
              "name": "punctuation.definition.variable.cfml"
            }
          }
        },
        {
          "name": "variable.parameter.query.positional.cfml punctuation.definition.variable.cfml",
          "match": "\\?"
        }
      ]
    },
    "source-cfml-script-arrow-function-declaration": {
      "patterns": [
        {
          "name": "meta.function.declaration.cfml meta.arrow.cfml",
          "begin": "(?=\\([^\\(]*?\\)\\s*=>\\s*\\{)",
          "end": "(=>)\\s*",
          "endCaptures": {
            "1": {
              "name": "storage.type.function.arrow.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-arrow-function-declaration-parameters"
            }
          ]
        },
        {
          "name": "meta.function.declaration.cfml meta.arrow.cfml",
          "begin": "(?=(?:\\b[_$a-zA-Z][$\\w]*|\\([^\\(]*?\\))\\s*=>)",
          "end": "(?=[);}\\],\\n])",
          "patterns": [
            {
              "begin": "(?=\\(|[_$a-zA-Z])",
              "end": "(?=(=>))",
              "patterns": [
                {
                  "include": "#source-cfml-script-arrow-function-declaration-parameters"
                },
                {
                  "include": "#source-cfml-script-arrow-function-declaration-single-unparenthesized-parameter"
                }
              ]
            },
            {
              "begin": "(=>)\\s*",
              "beginCaptures": {
                "0": {
                  "name": "meta.function.declaration.cfml meta.arrow.cfml"
                },
                "1": {
                  "name": "storage.type.function.arrow.cfml"
                }
              },
              "contentName": "meta.function.body.cfml",
              "end": "(?=[);}\\],\\n])",
              "patterns": [
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            }
          ]
        }
      ]
    },
    "source-cfml-script-brackets": {
      "patterns": [
        {
          "include": "#source-cfml-script-round-brackets"
        },
        {
          "include": "#source-cfml-script-square-brackets"
        }
      ]
    },
    "source-cfml-script-conditional": {
      "patterns": [
        {
          "include": "#source-cfml-script-switch-statement"
        },
        {
          "name": "meta.do-while.cfml",
          "begin": "\\bdo\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.loop.cfml"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.group.cfml punctuation.definition.group.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-decl-block"
            },
            {
              "name": "keyword.control.loop.cfml",
              "match": "\\bwhile\\b"
            },
            {
              "name": "meta.group.cfml",
              "begin": "\\(",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.group.begin.cfml"
                }
              },
              "end": "(?=\\))",
              "patterns": [
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            }
          ]
        },
        {
          "include": "#source-cfml-script-for-loop"
        },
        {
          "name": "meta.while.cfml",
          "begin": "\\bwhile\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.loop.cfml"
            }
          },
          "end": "(?:(\\})|(?=[^\\(\\{\\}\\s]))",
          "endCaptures": {
            "1": {
              "name": "meta.block.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-parens-block-scope"
            }
          ]
        },
        {
          "name": "meta.conditional.cfml",
          "begin": "\\b(else\\s+if|if)\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.conditional.cfml"
            }
          },
          "end": "(?:(\\})|(?=[^\\(\\{\\}\\s]))",
          "endCaptures": {
            "1": {
              "name": "meta.block.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-parens-block-scope"
            }
          ]
        },
        {
          "name": "meta.conditional.cfml",
          "begin": "\\belse\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.conditional.cfml"
            }
          },
          "end": "(?:(\\})|(?=[^\\{\\}\\s]))",
          "endCaptures": {
            "1": {
              "name": "meta.block.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-block-scope"
            }
          ]
        },
        {
          "name": "meta.try.cfml",
          "begin": "\\btry\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.try.cfml"
            }
          },
          "end": "(?:(\\})|(?=[^\\{\\}\\s]))",
          "endCaptures": {
            "1": {
              "name": "meta.block.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-block-scope"
            }
          ]
        },
        {
          "name": "meta.catch.cfml",
          "begin": "\\b(catch)\\b\\s*((\\()\\s*(?:(any)|([_$a-zA-Z][$\\w.]*))\\s+([_$a-zA-Z][$\\w]*)\\s*(\\)))",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.catch.cfml"
            },
            "2": {
              "name": "meta.catch.parameter.cfml"
            },
            "3": {
              "name": "punctuation.definition.parameters.begin.cfml"
            },
            "4": {
              "name": "support.type.primitive.cfml"
            },
            "5": {
              "name": "entity.name.type.cfml"
            },
            "6": {
              "name": "variable.other.readwrite.cfml"
            },
            "7": {
              "name": "punctuation.definition.parameters.begin.cfml"
            }
          },
          "end": "(?:(\\})|(?=[^\\{\\}\\s]))",
          "endCaptures": {
            "1": {
              "name": "meta.block.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-block-scope"
            }
          ]
        },
        {
          "name": "meta.finally.cfml",
          "begin": "\\bfinally\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.finally.cfml"
            }
          },
          "end": "(?:(\\})|(?=[^\\{\\}\\s]))",
          "endCaptures": {
            "1": {
              "name": "meta.block.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-block-scope"
            }
          ]
        }
      ]
    },
    "source-cfml-script-switch-statement": {
      "comment": "This is not a reserved word in Lucee",
      "name": "meta.switch.cfml",
      "begin": "\\bswitch\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.switch.cfml"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "meta.block.cfml punctuation.definition.block.end.cfml"
        }
      },
      "patterns": [
        {
          "include": "#source-cfml-script-round-brackets"
        },
        {
          "name": "meta.block.cfml",
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.block.begin.cfml"
            }
          },
          "end": "(?=\\})",
          "patterns": [
            {
              "begin": ":",
              "end": "(?=(\\bcase\\b|\\bdefault\\b|\\}))",
              "patterns": [
                {
                  "include": "#source-cfml-script-statements"
                }
              ]
            },
            {
              "name": "keyword.control.switch.cfml",
              "match": "\\b(case|default)\\b"
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        }
      ]
    },
    "source-cfml-script-for-loop": {
      "name": "meta.for.cfml",
      "begin": "\\bfor\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.loop.cfml"
        }
      },
      "end": "(?:(\\})|(?=[^\\(\\{\\}\\s]))",
      "endCaptures": {
        "1": {
          "name": "meta.block.cfml punctuation.definition.block.end.cfml"
        }
      },
      "patterns": [
        {
          "include": "#source-cfml-script-parens-block-scope"
        }
      ]
    },
    "source-cfml-script-support-call-parameter": {
      "patterns": [
        {
          "begin": "\\b([_$a-zA-Z][$\\w\\.]*)\\s*([=:])(?!=|>)",
          "captures": {
            "1": {
              "name": "entity.other.parameter-name.cfml"
            },
            "2": {
              "name": "keyword.operator.assignment.cfml"
            }
          },
          "end": "(?=[,\\)])",
          "patterns": [
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        }
      ]
    },
    "source-cfml-string-quoted-double": {
      "name": "string.quoted.double.cfml",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.cfml"
        }
      },
      "end": "\"(?!\")",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.cfml"
        }
      },
      "patterns": [
        {
          "include": "#hash-delimiters"
        },
        {
          "name": "constant.character.escape.quote.cfml",
          "match": "\"\""
        }
      ]
    },
    "source-cfml-script-number": {
      "name": "constant.numeric.cfml",
      "match": "(?xi)(?:\\B[-+])?(?:\\b0x[0-9a-f]*|(\\B\\.[0-9]+|\\b[0-9]+(\\.[0-9]*)?))"
    },
    "source-cfml-script-arrow-function-declaration-parameters": {
      "name": "meta.function.parameters.cfml",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.begin.cfml"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.cfml"
        }
      },
      "patterns": [
        {
          "include": "#source-cfml-script-function-parameters"
        }
      ]
    },
    "source-cfml-script-arrow-function-declaration-single-unparenthesized-parameter": {
      "name": "meta.function.parameters.cfml",
      "begin": "(?=[_$a-zA-Z])",
      "end": "(?=[^\\w])",
      "patterns": [
        {
          "name": "variable.parameter.function.cfml",
          "match": "[_$a-zA-Z][$\\w]*"
        }
      ]
    },
    "source-cfml-script-tag-in-script": {
      "patterns": [
        {
          "name": "meta.tag.script.cfml meta.tag.property.cfml",
          "begin": "(?i)\\b(property)(?!\\s+in\\b)(?:\\s+(any|array|binary|boolean|component|date|function|guid|numeric|query|string|struct|uuid|variablename|xml|[_$a-zA-Z][$\\w.]*))?\\s+([_$a-zA-Z][$\\w]*\\b)(?!\\s*=)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.script.cfml"
            },
            "2": {
              "name": "support.type.cfml"
            },
            "3": {
              "name": "string.unquoted.cfml meta.tag.property.name.cfml"
            }
          },
          "end": "(?=(;|{))",
          "patterns": [
            {
              "include": "#source-cfml-script-tag-generic-attribute"
            }
          ]
        },
        {
          "name": "meta.tag.script.cfml meta.tag.property.cfml",
          "begin": "(?i)\\b(property)(?!\\s+in\\b)(?=(\\s+[a-zA-Z]|\\s*$|\\s*[{;]))",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.script.cfml"
            }
          },
          "end": "(?=(;|{))",
          "patterns": [
            {
              "match": "(?i)\\b(name)\\s*(=)\\s*(?:((\")([^<>\"']*)(\"))|((')([^<>\"']*)('))|([^<>\"'\\s]*))",
              "captures": {
                "1": {
                  "name": "entity.other.attribute-name.cfml"
                },
                "2": {
                  "name": "punctuation.separator.key-value.cfml"
                },
                "3": {
                  "name": "string.quoted.double.cfml"
                },
                "4": {
                  "name": "punctuation.definition.string.begin.cfml"
                },
                "5": {
                  "name": "meta.tag.property.name.cfml"
                },
                "6": {
                  "name": "punctuation.definition.string.end.cfml"
                },
                "7": {
                  "name": "string.quoted.single.cfml"
                },
                "8": {
                  "name": "punctuation.definition.string.begin.cfml"
                },
                "9": {
                  "name": "meta.tag.property.name.cfml"
                },
                "10": {
                  "name": "punctuation.definition.string.end.cfml"
                },
                "11": {
                  "name": "string.unquoted.cfml meta.tag.property.name.cfml"
                }
              }
            },
            {
              "match": "(?x)(?i)\n  \\b(type)\\s*(=)\\s*((\")(\n  (any|array|binary|boolean|component|date|function|guid|numeric|query|string|struct|uuid|variablename|xml) # primitive\n  |\n  ([_$a-zA-Z][$\\w.]*) #component/object (may need additional tokens)\n)(?:(\\[)(\\]))?(\"))",
              "captures": {
                "1": {
                  "name": "entity.other.attribute-name.cfml"
                },
                "2": {
                  "name": "punctuation.separator.key-value.cfml"
                },
                "3": {
                  "name": "string.quoted.double.cfml"
                },
                "4": {
                  "name": "punctuation.definition.string.begin.cfml"
                },
                "5": {
                  "name": "storage.type.cfml"
                },
                "6": {
                  "name": "support.type.primitive.cfml"
                },
                "7": {
                  "name": "entity.name.type.object.cfml"
                },
                "8": {
                  "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.begin.cfml"
                },
                "9": {
                  "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.end.cfml"
                },
                "10": {
                  "name": "punctuation.definition.string.end.cfml"
                }
              }
            },
            {
              "include": "#source-cfml-script-tag-generic-attribute"
            }
          ]
        },
        {
          "name": "meta.tag.script.cfml",
          "begin": "(?i)\\b(param)(?!\\s+in\\b)(?=\\s+(name|default|max|maxLength|min|pattern|type)\\s*=)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.script.cfml"
            }
          },
          "end": "(?=[;{])",
          "patterns": [
            {
              "include": "#source-cfml-script-tag-generic-attribute-script"
            }
          ]
        },
        {
          "name": "meta.tag.script.cfml",
          "begin": "(?i)\\b(param)(?!\\s+in\\b)\\s+([_$a-zA-Z][$\\w\\.]*)(?=\\s+(name|default|max|maxLength|min|pattern|type))",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.script.cfml"
            },
            "2": {
              "name": "string.unquoted.cfml"
            }
          },
          "end": "(?=[;{])",
          "patterns": [
            {
              "include": "#source-cfml-script-tag-generic-attribute-script"
            }
          ]
        },
        {
          "name": "meta.tag.script.cfml",
          "begin": "(?i)\\b(param)(?!\\s+in\\b)(?:\\s+([_$a-zA-Z][$\\w]*))?\\s+([_$a-zA-Z][$\\w\\.]*\\b)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.script.cfml"
            },
            "2": {
              "name": "storage.type.cfml"
            },
            "3": {
              "name": "string.unquoted.cfml"
            }
          },
          "end": "(?=[;{])",
          "patterns": [
            {
              "include": "#source-cfml-script-tag-generic-attribute-script"
            }
          ]
        },
        {
          "name": "meta.tag.script.cfml",
          "begin": "(?i)\\b(param)(?!\\s+in\\b)(?=(\\s+[a-zA-Z]|\\s*[{;]|\\s*$))",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.script.cfml"
            }
          },
          "end": "(?=[;{])",
          "patterns": [
            {
              "include": "#source-cfml-script-tag-generic-attribute-script"
            }
          ]
        },
        {
          "begin": "(?x)\\b\n(?i:\n  (ajaximport|ajaxproxy|applet|application|argument|associate|break|cache|calendar\n  |chart|chartdata|chartseries|client|clientsettings|col|collection|content|cookie|dbinfo\n  |directory|div|document|documentitem|documentsection|dump|error|exchangecalendar\n  |exchangeconnection|exchangecontact|exchangefilter|exchangemail|exchangetask\n  |execute|feed|file|fileupload|flush|form|formgroup|formitem|ftp|grid|gridcolumn\n  |gridrow|gridupdate|header|htmlhead|htmltopdf|htmltopdfitem|http|httpparam|image\n  |imap|imapfilter|import|include|index|input|insert|invoke|invokeargument|layout\n  |layoutarea|ldap|location|lock|log|login|loginuser|logout|loop|mail|mailparam|mailpart\n  |map|mapitem|mediaplayer|menu|menuitem|messagebox|module|ntauthenticate|oauth|object\n  |objectcache|output|param|pdf|pdfform|pdfformparam|pdfparam|pdfsubform|pod|pop\n  |presentation|presentationslide|presenter|print|processingdirective|procparam|procresult\n  |progressbar|property|query|queryparam|registry|report|reportparam|savecontent|schedule\n  |search|select|setting|sharepoint|silent|slider|spreadsheet|sprydataset|storedproc\n  |table|textarea|textinput|thread|throw|timer|tooltip|trace|transaction|tree|treeitem|try\n  |update|video|videoplayer|videoplayerparam|wddx|websocket|window|xml|zip|zipparam)\n)(?=\\s+[a-zA-Z0-9:-]+\\s*(?:[=;{]|$)|\\s*(?:\\{|$))",
          "beginCaptures": {
            "1": {
              "name": "meta.tag.script.cfml entity.name.tag.script.cfml"
            }
          },
          "end": "(\\})|(?=;)",
          "endCaptures": {
            "1": {
              "name": "meta.block.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "meta.tag.script.cfml",
              "match": "\\s+"
            },
            {
              "include": "#source-cfml-script-block-scope"
            },
            {
              "include": "#source-cfml-script-tag-generic-attribute-script"
            }
          ]
        }
      ]
    },
    "source-cfml-script-method-call-params": {
      "name": "meta.function-call.parameters.method.cfml",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.arguments.begin.cfml"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "name": "punctuation.separator.function-call.method.cfml",
          "match": ","
        },
        {
          "begin": "\\b(?i:(argumentCollection)|([_$a-zA-Z][$\\w]*))\\s*(=)(?!=|>)",
          "beginCaptures": {
            "1": {
              "name": "entity.other.argumentCollection.cfml"
            },
            "2": {
              "name": "entity.other.parameter-name.cfml"
            },
            "3": {
              "name": "keyword.operator.assignment.cfml"
            }
          },
          "end": "(?=[,\\)])",
          "patterns": [
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "include": "#source-cfml-script-expressions"
        }
      ]
    },
    "source-cfml-script-hash-delimiters": {
      "patterns": [
        {
          "name": "constant.character.escape.hash.cfml",
          "match": "##"
        },
        {
          "begin": "#",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.begin.cfml"
            }
          },
          "contentName": "meta.embedded.line.cfml source.cfml.script",
          "end": "#",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        }
      ]
    },
    "source-cfml-script-tag-generic-attribute": {
      "patterns": [
        {
          "include": "#source-cfml-script-comments"
        },
        {
          "match": "\\b([a-zA-Z_][\\w:-]*)\\b",
          "captures": {
            "1": {
              "name": "entity.other.attribute-name.cfml"
            }
          }
        },
        {
          "match": "(=|:)\\s*((?:[^\\s<>/'\"{;]|/(?!/>))+)",
          "captures": {
            "1": {
              "name": "punctuation.separator.key-value.cfml"
            },
            "2": {
              "name": "string.unquoted.cfml"
            }
          }
        },
        {
          "name": "punctuation.separator.key-value.cfml",
          "match": "(=|:)"
        },
        {
          "include": "#source-cfml-script-tag-string"
        },
        {
          "name": "invalid.illegal.attribute-name.cfml",
          "match": "\\S+"
        }
      ]
    },
    "source-cfml-script-support-method-call": {
      "name": "meta.function-call.method.support.cfml",
      "begin": "(?x)\n(?i:\n  (add|addautofilter|addborder|addcolumn|addfreezepane|addimage|addinfo|addpagebreaks|addrow|addrows|addsplitpane|append|avg|binarydecode|binaryenecode|blur|booleanformat|canonicalize|charsetdecode|charsetencode|childpos|cjustify|clear|clearrect|columnarray|columncount|columndata|columnexists\n  |columnlist|compare|comparenocase|contains|containsnocase|convert|convertforgrid|copy|count|createodbcdate|createodbcdatetime|createodbctime|createsheet|crop|currentrow|dateformat|datepart|datetimeformat|day|dayofweek\n  |dayofyear|daysinmonth|daysinyear|decodeforhtml|decodefromurl|decrypt|delete|deleteat|deletecolumn|deletecolumns|deletenocase|deleterow|deleterows|diff|drawarc|drawbeveledrect|drawcubiccurve|drawline\n  |drawlines|drawoval|drawpoint|drawquadraticcurve|drawrect|drawroundrect|drawtext|each|elemnew|encodeforcss|encodeforhtml|encodeforhtmlattribute|encodeforjavascript|encodeforurl|encodeforxml|encodeforxmlattribute|encodeforxpath|encrypt|every|filter|find|findall\n  |findallnocase|findkey|findnocase|findoneof|findvalue|first|firstdayofmonth|flip|formatbasen|formatcell|formatcellrange|formatcolumn|formatcolumns|formatrow|formatrows|generatesecretkey|get|getblob|getbufferedimage|getcell\n  |getcellcomment|getcellformula|getcellvalue|getcolumncount|getexifmetadata|getexiftag|getheight|getiptcmetadata|getiptctag|getmetadata|getnodetype|getresult|getrow|getsafehtml|gettoken|getwidth|grayscale|hash|hour|htmlcodeformat|htmleditformat|indexexists|info|insert|insertat|isdefined|isempty|issafehtml|jssstringformat|keyarray\n  |keyexists|keylist|keytranslate|last|lcase|left|len|listappend|listavg|listchangedelims|listcompact|listcontains\n  |listcontainsnocase|listdeleteat|listeach|listevery|listfilter|listfind|listfindnocase|listfirst|listgetat\n  |listindexexists|listinsertat|listitemtrim|listlast|listlen|listmap|listprepend|listqualify|listreduce\n  |listremoveduplicates|listrest|listsetat|listsome|listsort|listtoarray|listvaluecount|listvaluecountnocase\n  |ljustify|lsdateformat|lsdayofweek|lsiscurrency|lsisdate|lsisnumeric|lsparsecurrency|lsparsedatetime|lsparseeurocurrency|lsparsenumber|lstimeformat|ltrim|map|max|median|merge|mergecells|mid|min|minute|month|negative|overlay|paragraphformat|part|parsedatetime|paste|prepend\n  |quarter|readbinary|recordcount|reduce|refind|refindnocase|rematch|rematchnocase|removechars|removesheet|repeatstring|replace|replacelist|replacelistnocase|replacenocase\n  |rereplace|rereplacenocase|resize|reverse|right|rjustify|rotate|rotatedrawingaxis|rowdata|rtrim|scaletofit|search|second|set|setactivesheet|setactivesheetnumber|setantialiasing|setbackgroundcolor|setcell\n  |setcellcomment|setcellformula|setcellvalue|setcolumnwidth|setday|setdrawingcolor|setdrawingstroke|setdrawingtransparency|setfooter|setheader|sethour|setmetadata|setminute|setmonth|setrowheight|setsecond|setyear|sharpen|shear|sheardrawingaxis|shiftcolumns|shiftrows|slice|some|sort|spanexcluding|spanincluding|stripcr|sum|swap|timeformat|tobase64|tobinary|tolist|tosorted|tostring|tostruct|transform|translate\n  |translatedrawingaxis|trim|ucase|update|urldecode|urlencodedformat|val|valuearray|week|wrap|write|writebase64|xmlformat|xordrawingmode|year|yesnoformat)\n)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.member.cfml"
        },
        "2": {
          "name": "meta.function-call.parameters.method.support.cfml punctuation.definition.arguments.begin.cfml"
        }
      },
      "contentName": "meta.function-call.parameters.method.support.cfml",
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.function-call.parameters.method.support.cfml punctuation.definition.arguments.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "punctuation.separator.function-call.method.support.cfml",
          "match": ","
        },
        {
          "begin": "\\b([_$a-zA-Z][$\\w\\.]*)\\s*([=:])(?!=|>)",
          "beginCaptures": {
            "1": {
              "name": "entity.other.parameter-name.cfml"
            },
            "2": {
              "name": "keyword.operator.assignment.cfml"
            }
          },
          "end": "(?=[,\\)])",
          "patterns": [
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "include": "#source-cfml-script-expressions"
        }
      ]
    },
    "source-cfml-script-function-parameters": {
      "patterns": [
        {
          "name": "punctuation.separator.parameter.cfml",
          "match": ","
        },
        {
          "name": "keyword.other.required.argument.cfml",
          "match": "(?i:required)(?=\\s)"
        },
        {
          "begin": "(?:(?:(any|array|binary|boolean|component|date|function|guid|numeric|query|string|struct|uuid|variablename|xml)|([_$a-zA-Z][$\\w.]*))(?:(\\[)(\\]))?\\s+)?([_$a-zA-Z][$\\w]*)",
          "beginCaptures": {
            "1": {
              "name": "support.type.primitive.cfml"
            },
            "2": {
              "name": "entity.name.type.cfml"
            },
            "3": {
              "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.begin.cfml"
            },
            "4": {
              "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.end.cfml"
            },
            "5": {
              "name": "variable.parameter.function.cfml"
            }
          },
          "end": "(?=[,)])",
          "patterns": [
            {
              "begin": "(?=[_$a-zA-Z][$\\w]*)",
              "end": "(?=[,)])",
              "patterns": [
                {
                  "include": "#source-cfml-script-tag-generic-attribute"
                }
              ]
            },
            {
              "comment": "This does not correctly capture scopes, functions, or new objects",
              "name": "meta.parameter.optional.cfml",
              "begin": "(=)\\s*(?i:(\\btrue\\b)|(\\bfalse\\b)|(\\bnull\\b)|([_$a-zA-Z][$\\w]*))?",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.assignment.cfml"
                },
                "2": {
                  "name": "constant.language.boolean.true.cfml"
                },
                "3": {
                  "name": "constant.language.boolean.false.cfml"
                },
                "4": {
                  "name": "constant.language.null.cfml"
                },
                "5": {
                  "name": "variable.other.readwrite.cfml"
                }
              },
              "end": "(?=([_$a-zA-Z][$\\w]*|[,)]))",
              "patterns": [
                {
                  "begin": "(?=\\s*([+\\-*/&%])\\s*[_$a-zA-Z][$\\w]*)",
                  "end": "[_$a-zA-Z][$\\w]*",
                  "endCaptures": {
                    "0": {
                      "name": "variable.other.readwrite.cfml"
                    }
                  },
                  "patterns": [
                    {
                      "include": "#source-cfml-script-operators"
                    }
                  ]
                },
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            }
          ]
        },
        {
          "include": "#source-cfml-script-comments"
        }
      ]
    },
    "source-cfml-script-decl-block": {
      "name": "meta.block.cfml",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.begin.cfml"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.end.cfml"
        }
      },
      "patterns": [
        {
          "include": "#source-cfml-script-statements"
        }
      ]
    },
    "source-cfml-script-block-scope": {
      "name": "meta.block.cfml",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.begin.cfml"
        }
      },
      "end": "(?=\\})",
      "patterns": [
        {
          "include": "#source-cfml-script-statements"
        }
      ]
    },
    "source-cfml-script-punctuation": {
      "patterns": [
        {
          "begin": "(\\?\\.)|(\\.)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.accessor.safe.cfml"
            },
            "2": {
              "name": "punctuation.accessor.cfml"
            }
          },
          "end": "(?<=\\))|(?=\\n)|(\\})|(;)|(?:([A-Z][_$\\dA-Z]*)|([$\\w]+))(?=\\n|[^$\\w])(?!(\\s*\\(|\\s*=\\s*(function\\b|\\([^\\(]*?\\)\\s*=>)))",
          "endCaptures": {
            "1": {
              "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
            },
            "2": {
              "name": "punctuation.terminator.statement.cfml"
            },
            "3": {
              "name": "meta.property.constant.cfml variable.other.property.cfml"
            },
            "4": {
              "name": "meta.property.cfml variable.other.property.cfml"
            }
          },
          "patterns": [
            {
              "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(function\\b|(\\b[_$a-zA-Z][$\\w]*|\\([^\\(]*?\\))\\s*=>\\s*\\{))",
              "end": "(?=\\})",
              "patterns": [
                {
                  "name": "meta.function.body.cfml",
                  "begin": "\\{",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.block.begin.cfml"
                    }
                  },
                  "end": "(?=\\})",
                  "patterns": [
                    {
                      "include": "#source-cfml-script-statements"
                    }
                  ]
                },
                {
                  "match": "([_$a-zA-Z][$\\w]*)\\s*(=)\\s*",
                  "captures": {
                    "0": {
                      "name": "meta.function.declaration.cfml"
                    },
                    "1": {
                      "name": "meta.property.cfml entity.name.function.cfml"
                    },
                    "2": {
                      "name": "keyword.operator.assignment.cfml"
                    }
                  }
                },
                {
                  "include": "#source-cfml-script-function-declaration"
                },
                {
                  "include": "#source-cfml-script-arrow-function-declaration"
                }
              ]
            },
            {
              "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(\\b[_$a-zA-Z][$\\w]*|\\([^\\(]*?\\))\\s*=>)",
              "end": "(?=[);}\\],\\n])",
              "patterns": [
                {
                  "match": "([_$a-zA-Z][$\\w]*)\\s*(=)\\s*",
                  "captures": {
                    "0": {
                      "name": "meta.function.declaration.cfml"
                    },
                    "1": {
                      "name": "meta.property.cfml entity.name.function.cfml"
                    },
                    "2": {
                      "name": "keyword.operator.assignment.cfml"
                    }
                  }
                },
                {
                  "include": "#source-cfml-script-arrow-function-declaration"
                }
              ]
            },
            {
              "include": "#source-cfml-script-method-call"
            }
          ]
        },
        {
          "begin": "::",
          "beginCaptures": {
            "0": {
              "name": "punctuation.accessor.static.cfml"
            }
          },
          "end": "(?<=\\))|(?=\\n)|(\\})|(;)|(?:([A-Z][_$\\dA-Z]*)|([_$a-zA-Z][$\\w]*))(?=\\n|[^$\\w])(?!(\\s*\\(|\\s*=\\s*(function\\b|\\([^\\(]*?\\)\\s*=>)))",
          "endCaptures": {
            "1": {
              "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
            },
            "2": {
              "name": "punctuation.terminator.statement.cfml"
            },
            "3": {
              "name": "meta.property.constant.cfml"
            },
            "4": {
              "name": "meta.property.cfml"
            }
          },
          "patterns": [
            {
              "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(function\\b|(\\b[_$a-zA-Z][$\\w]*|\\([^\\(]*?\\))\\s*=>\\s*\\{))",
              "end": "(?=\\})",
              "patterns": [
                {
                  "name": "meta.function.body.cfml",
                  "begin": "\\{",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.block.begin.cfml"
                    }
                  },
                  "end": "(?=\\})",
                  "patterns": [
                    {
                      "include": "#source-cfml-script-statements"
                    }
                  ]
                },
                {
                  "match": "([_$a-zA-Z][$\\w]*)\\s*(=)\\s*",
                  "captures": {
                    "0": {
                      "name": "meta.function.declaration.cfml"
                    },
                    "1": {
                      "name": "meta.property.cfml entity.name.function.cfml"
                    },
                    "2": {
                      "name": "keyword.operator.assignment.cfml"
                    }
                  }
                },
                {
                  "include": "#source-cfml-script-function-declaration"
                },
                {
                  "include": "#source-cfml-script-arrow-function-declaration"
                }
              ]
            },
            {
              "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(\\b[_$a-zA-Z][$\\w]*|\\([^\\(]*?\\))\\s*=>)",
              "end": "(?=[);}\\],\\n])",
              "patterns": [
                {
                  "match": "([_$a-zA-Z][$\\w]*)\\s*(=)\\s*",
                  "captures": {
                    "0": {
                      "name": "meta.function.declaration.cfml"
                    },
                    "1": {
                      "name": "meta.property.cfml entity.name.function.cfml"
                    },
                    "2": {
                      "name": "keyword.operator.assignment.cfml"
                    }
                  }
                },
                {
                  "include": "#source-cfml-script-arrow-function-declaration"
                }
              ]
            },
            {
              "include": "#source-cfml-script-static-method-call"
            }
          ]
        },
        {
          "name": "punctuation.terminator.statement.cfml",
          "match": "\\;"
        },
        {
          "name": "meta.delimiter.comma.cfml",
          "match": ","
        }
      ]
    },
    "source-cfml-script-tag-string": {
      "patterns": [
        {
          "include": "#source-cfml-script-tag-string-quoted-single"
        },
        {
          "include": "#source-cfml-script-string-quoted-double"
        }
      ]
    },
    "source-cfml-script-tag-in-script-cf": {
      "patterns": [
        {
          "begin": "(?x)(?i)\n  ((cf\n  (?:ajaximport|ajaxproxy|application|argument|associate|break|cache\n  |chart|chartdata|chartseries|client|clientsettings|col|collection|content|cookie|dbinfo\n  |directory|div|document|documentitem|documentsection|dump|error|exchangecalendar\n  |exchangeconnection|exchangecontact|exchangefilter|exchangemail|exchangetask\n  |execute|feed|file|fileupload|flush|form|formgroup|formitem|ftp|grid|gridcolumn\n  |gridrow|gridupdate|header|htmlhead|htmltopdf|htmltopdfitem|http|httpparam|image\n  |imap|imapfilter|import|include|index|input|insert|invoke|invokeargument|layout\n  |layoutarea|ldap|location|lock|log|login|loginuser|logout|loop|mail|mailparam|mailpart\n  |map|mapitem|menuitem|messagebox|module|ntauthenticate|oauth|object\n  |objectcache|output|param|pdf|pdfform|pdfformparam|pdfparam|pdfsubform|pod|pop\n  |presentation|presentationslide|presenter|print|processingdirective|procparam|procresult\n  |progressbar|property|query|queryparam|registry|report|reportparam|savecontent|schedule\n  |search|select|setting|sharepoint|silent|slider|spreadsheet|storedproc\n  |textarea|thread|throw|timer|tooltip|trace|transaction|treeitem|try\n  |update|video|videoplayer|videoplayerparam|wddx|websocket|window|xml|zip|zipparam)\n)|(cf(?:applet|calendar|mediaplayer|menu|sprydataset|table|textinput|tree)))\\s*\\(",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.script.cfml"
            },
            "3": {
              "name": "invalid.deprecated.tag.script.cfml"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "match": "\\b([a-zA-Z_][\\w:-]*)\\b",
              "captures": {
                "1": {
                  "name": "entity.other.attribute-name.cfml"
                }
              }
            },
            {
              "begin": "(=|:)",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.separator.key-value.cfml"
                }
              },
              "end": "(?=\\s*\\b([a-zA-Z_][\\w:-]*)\\s*=)|(?=\\))",
              "patterns": [
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            },
            {
              "name": "invalid.illegal.attribute-name.cfml",
              "match": "\\S+"
            }
          ],
          "name": "meta.tag.script.cf.cfml"
        }
      ]
    },
    "source-cfml-script-call": {
      "patterns": [
        {
          "name": "meta.function-call.support.cfml meta.function-call.support.typed-arraynew.cfml",
          "begin": "(?i)(?=\\barraynew\\s*\\[)",
          "end": "(?<=\\))",
          "patterns": [
            {
              "begin": "(?i)\\b(arraynew)\\s*(\\[)",
              "beginCaptures": {
                "1": {
                  "name": "support.function.cfml"
                },
                "2": {
                  "name": "meta.brackets.cfml meta.type.parameters.cfml punctuation.definition.brackets.begin.cfml"
                }
              },
              "contentName": "meta.brackets.cfml meta.type.parameters.cfml",
              "end": "\\]",
              "endCaptures": {
                "0": {
                  "name": "meta.brackets.cfml meta.type.parameters.cfml punctuation.definition.brackets.end.cfml"
                }
              },
              "patterns": [
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            },
            {
              "begin": "(?<=\\])\\s*(\\()",
              "beginCaptures": {
                "1": {
                  "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.begin.cfml"
                }
              },
              "contentName": "meta.function-call.parameters.support.cfml",
              "end": "\\)",
              "endCaptures": {
                "0": {
                  "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.end.cfml"
                }
              },
              "patterns": [
                {
                  "name": "punctuation.separator.function-call.support.cfml",
                  "match": ","
                },
                {
                  "include": "#source-cfml-script-support-call-parameter"
                },
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?=[_$a-zA-Z][$\\w]*\\s*\\()",
          "end": "(?<=\\))",
          "patterns": [
            {
              "include": "#source-cfml-script-support-call"
            },
            {
              "captures": {
                "1": {
                  "name": "meta.function-call.cfml entity.name.function.cfml"
                }
              },
              "match": "([_$a-zA-Z][$\\w]*)\\s*(?=\\()"
            },
            {
              "include": "#source-cfml-script-function-call-params"
            }
          ]
        },
        {
          "begin": "(?=[_$a-zA-Z][$\\w]*\\s*\\.\\s*[_$a-zA-Z][$\\w]*\\s*\\()",
          "end": "(?<=\\))",
          "patterns": [
            {
              "begin": "(?=[_$a-zA-Z][$\\w]*\\s*\\.)",
              "end": "(\\?\\.)|(\\.)",
              "endCaptures": {
                "1": {
                  "name": "punctuation.accessor.safe.cfml"
                },
                "2": {
                  "name": "punctuation.accessor.cfml"
                }
              },
              "patterns": [
                {
                  "include": "#source-cfml-script-cfml-scopes"
                },
                {
                  "name": "variable.other.object.cfml",
                  "match": "[_$a-zA-Z][$\\w]*"
                }
              ]
            },
            {
              "name": "keyword.other.accessor.cfml",
              "match": "\\.|\\?\\."
            },
            {
              "include": "#source-cfml-script-method-call"
            }
          ]
        },
        {
          "begin": "(?=[_$a-zA-Z][$\\w.]*\\s*::\\s*[_$a-zA-Z][$\\w]*\\s*\\()",
          "end": "(?<=\\))",
          "patterns": [
            {
              "begin": "(?=[_$a-zA-Z][$\\w.]*\\s*::)",
              "end": "::",
              "endCaptures": {
                "0": {
                  "name": "punctuation.accessor.static.cfml"
                }
              },
              "patterns": [
                {
                  "name": "entity.name.class.cfml",
                  "match": "[_$a-zA-Z][$\\w.]*"
                }
              ]
            },
            {
              "include": "#source-cfml-script-static-method-call"
            }
          ]
        }
      ]
    },
    "hash-delimiters": {
      "patterns": [
        {
          "name": "constant.character.escape.hash.cfml",
          "match": "##"
        },
        {
          "begin": "#",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.begin.cfml"
            }
          },
          "contentName": "meta.embedded.line.cfml source.cfml.script",
          "end": "#",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script"
            }
          ]
        }
      ]
    },
    "source-cfml-script-square-brackets": {
      "patterns": [
        {
          "name": "meta.brackets.cfml",
          "begin": "(?<=[$\\w\\)\\]])\\s*(\\[)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.brackets.begin.cfml"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.brackets.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "punctuation.separator.slice.cfml",
              "match": ":"
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "name": "meta.array-literal.cfml",
          "begin": "\\[",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.brackets.begin.cfml"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.brackets.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "punctuation.separator.array-literal.cfml",
              "match": ","
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        }
      ]
    },
    "source-cfml-script-main": {
      "patterns": [
        {
          "include": "#source-cfml-script-keywords-top-level"
        },
        {
          "include": "#source-cfml-script-component"
        },
        {
          "include": "#source-cfml-script-statements"
        }
      ]
    },
    "source-cfml-script-tag-string-quoted-double": {
      "name": "string.quoted.double.cfml",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.cfml"
        }
      },
      "end": "\"(?!\")",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "constant.character.escape.quote.cfml",
          "match": "\"\""
        },
        {
          "include": "#source-cfml-script-hash-delimiters"
        }
      ]
    },
    "source-cfml-script-function-call-params": {
      "name": "meta.function-call.cfml meta.function-call.parameters.cfml",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.arguments.begin.cfml"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.arguments.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "punctuation.separator.function-call.cfml",
          "match": ","
        },
        {
          "begin": "\\b([_$a-zA-Z][$\\w]*)\\s*([=:])(?!=|>)",
          "beginCaptures": {
            "1": {
              "name": "entity.other.parameter-name.cfml"
            },
            "2": {
              "name": "keyword.operator.assignment.cfml"
            }
          },
          "end": "(?=[,\\)])",
          "patterns": [
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "include": "#source-cfml-script-expressions"
        }
      ]
    },
    "source-cfml-script-string": {
      "patterns": [
        {
          "include": "#source-cfml-script-string-quoted-single"
        },
        {
          "include": "#source-cfml-script-string-quoted-double"
        }
      ]
    },
    "source-cfml-script-comments": {
      "patterns": [
        {
          "name": "comment.block.documentation.cfml",
          "begin": "(/\\*\\*)\\s*$",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.cfml"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.cfml"
            }
          },
          "patterns": [
            {
              "begin": "^\\s*\\*?\\s*((@)\\S*)\\b",
              "beginCaptures": {
                "1": {
                  "name": "keyword.other.documentation.cfml"
                },
                "2": {
                  "name": "punctuation.definition.keyword.cfml"
                }
              },
              "end": "(\\n|(?=\\*/))"
            },
            {
              "begin": "^\\s*(\\*(?!/))?\\s*(?=\\w)",
              "end": "(\\n|(?=\\*/))"
            }
          ]
        },
        {
          "name": "comment.block.cfml",
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.cfml"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.cfml"
            }
          }
        },
        {
          "name": "comment.line.double-slash.cfml",
          "begin": "//",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.cfml"
            }
          },
          "end": "\\n"
        },
        {
          "include": "#source-cfml-tag-comments"
        }
      ]
    },
    "source-cfml-script-function-declaration-parameters": {
      "patterns": [
        {
          "name": "meta.function.declaration.cfml meta.function.parameters.cfml",
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.begin.cfml"
            }
          },
          "end": "(?=\\))",
          "patterns": [
            {
              "include": "#source-cfml-script-function-parameters"
            }
          ]
        },
        {
          "name": "meta.function.declaration.cfml",
          "begin": "\\)",
          "beginCaptures": {
            "0": {
              "name": "meta.function.parameters.cfml punctuation.definition.parameters.end.cfml"
            }
          },
          "end": "(?=(\\{|;|=>))",
          "patterns": [
            {
              "include": "#source-cfml-script-tag-generic-attribute"
            }
          ]
        }
      ]
    },
    "source-cfml-script-anonymous-function": {
      "patterns": [
        {
          "begin": "(?=\\s*(\\bfunction\\b|(\\b[_$a-zA-Z][$\\w]*|\\([^\\(]*?\\))\\s*=>\\s*\\{))",
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "meta.function.body.cfml",
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.block.begin.cfml"
                }
              },
              "end": "(?=\\})",
              "patterns": [
                {
                  "include": "#source-cfml-script-statements"
                }
              ]
            },
            {
              "match": "\\b(function)\\b\\s*",
              "captures": {
                "0": {
                  "name": "meta.function.anonymous.cfml meta.function.declaration.cfml"
                },
                "1": {
                  "name": "storage.type.function.cfml"
                }
              }
            },
            {
              "match": "\\s*(=>)\\s*",
              "captures": {
                "0": {
                  "name": "meta.function.anonymous.cfml meta.function.declaration.cfml meta.arrow.cfml"
                },
                "1": {
                  "name": "storage.type.function.arrow.cfml"
                }
              }
            },
            {
              "name": "meta.function.anonymous.cfml meta.function.declaration.cfml meta.function.parameters.cfml",
              "begin": "\\(",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.parameters.begin.cfml"
                }
              },
              "end": "(?=\\))",
              "patterns": [
                {
                  "include": "#source-cfml-script-function-parameters"
                }
              ]
            },
            {
              "name": "meta.function.anonymous.cfml meta.function.declaration.cfml",
              "begin": "\\)",
              "beginCaptures": {
                "0": {
                  "name": "meta.function.parameters.cfml punctuation.definition.parameters.end.cfml"
                }
              },
              "end": "(?=(\\{|=>))",
              "patterns": [
                {
                  "include": "#source-cfml-script-tag-generic-attribute"
                }
              ]
            },
            {
              "name": "meta.function.anonymous.cfml meta.function.declaration.cfml meta.function.parameters.cfml variable.parameter.function.cfml",
              "match": "[_$a-zA-Z][$\\w]*"
            }
          ]
        },
        {
          "begin": "(?=\\s*(\\b[_$a-zA-Z][$\\w]*|\\([^\\(]*?\\))\\s*=>)",
          "end": "(?=[);}\\],\\n])",
          "patterns": [
            {
              "begin": "\\s*(=>)\\s*",
              "beginCaptures": {
                "0": {
                  "name": "meta.function.anonymous.cfml meta.function.declaration.cfml meta.arrow.cfml"
                },
                "1": {
                  "name": "storage.type.function.arrow.cfml"
                }
              },
              "contentName": "meta.function.body.cfml",
              "end": "(?=[);}\\],\\n])",
              "patterns": [
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            },
            {
              "name": "meta.function.anonymous.cfml meta.function.declaration.cfml meta.function.parameters.cfml",
              "begin": "\\(",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.parameters.begin.cfml"
                }
              },
              "end": "\\)",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.parameters.end.cfml"
                }
              },
              "patterns": [
                {
                  "include": "#source-cfml-script-function-parameters"
                }
              ]
            },
            {
              "name": "meta.function.anonymous.cfml meta.function.declaration.cfml meta.function.parameters.cfml variable.parameter.function.cfml",
              "match": "[_$a-zA-Z][$\\w]*"
            }
          ]
        }
      ]
    },
    "source-cfml-script-struct-literal": {
      "name": "meta.struct-literal.cfml",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.begin.cfml"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.end.cfml"
        }
      },
      "patterns": [
        {
          "include": "#source-cfml-script-comments"
        },
        {
          "begin": "(?=(\\'[^']*\\'|\\\"[^\"]*\\\"|[_$a-zA-Z][$\\w]*)\\s*(:|=)\\s*(\\bfunction\\b|(\\b[_$a-zA-Z][$\\w]*|\\([^\\(]*?\\))\\s*=>\\s*\\{))",
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal-function-keys"
            },
            {
              "begin": "(?=\\s*\\bfunction\\b)",
              "end": "(?=\\})",
              "patterns": [
                {
                  "include": "#source-cfml-script-function-declaration"
                },
                {
                  "name": "meta.function.body.cfml",
                  "begin": "\\{",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.block.begin.cfml"
                    }
                  },
                  "end": "(?=\\})",
                  "patterns": [
                    {
                      "include": "#source-cfml-script-statements"
                    }
                  ]
                }
              ]
            },
            {
              "begin": "(?=\\s*(\\b[_$a-zA-Z][$\\w]*|\\([^\\(]*?\\))\\s*=>\\s*\\{)",
              "end": "(?=\\})",
              "patterns": [
                {
                  "include": "#source-cfml-script-arrow-function-declaration"
                },
                {
                  "name": "meta.function.body.cfml",
                  "begin": "\\{",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.block.begin.cfml"
                    }
                  },
                  "end": "(?=\\})",
                  "patterns": [
                    {
                      "include": "#source-cfml-script-statements"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "begin": "(?=(\\'[^']*\\'|\\\"[^\"]*\\\"|[_$a-zA-Z][$\\w]*)\\s*(:|=)\\s*(\\b[_$a-zA-Z][$\\w]*|\\([^\\(]*?\\))\\s*=>)",
          "end": "(?=[);}\\],\\n])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal-function-keys"
            },
            {
              "include": "#source-cfml-script-arrow-function-declaration"
            }
          ]
        },
        {
          "name": "variable.struct-literal.key.cfml",
          "begin": "(?=\"|')",
          "patterns": [
            {
              "include": "#source-cfml-script-string"
            }
          ],
          "end": "(?<=\"|')"
        },
        {
          "name": "variable.struct-literal.key.cfml",
          "match": "[$\\w]+"
        },
        {
          "begin": "(:|=)\\s*",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.key-value.cfml"
            }
          },
          "end": "(,)|(?=\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.separator.struct-literal.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "name": "punctuation.separator.struct-literal.cfml",
          "match": ","
        }
      ]
    },
    "source-cfml-script-named-function": {
      "patterns": [
        {
          "begin": "(?x)\n(?:\n  (?:\n    (?i:\\b(private|package|public|remote|static|final|abstract|default)\\s+)?\n    (?i:\\b(private|package|public|remote|static|final|abstract|default)\\s+)?\n    ((?i:\\b\n      (any|array|binary|boolean|component|date|function|guid|numeric|query|string|struct|uuid|variablename|void|xml)\\s+\n      |\n      ([A-Za-z0-9_.$]+)\\s+\n      |\n      ([A-Za-z0-9_.$]+)(?:(\\[)(\\]))?\\s+\n    ))?\n  )\n)\n(?i:(function))\n\\s+\n(?:\n  (init)\n  |\n  ([_$a-zA-Z][$\\w]*)\n)\\b",
          "beginCaptures": {
            "0": {
              "name": "meta.function.declaration.cfml"
            },
            "1": {
              "name": "storage.modifier.cfml"
            },
            "2": {
              "name": "storage.modifier.cfml"
            },
            "3": {
              "name": "meta.function.return-type.cfml"
            },
            "4": {
              "name": "support.type.primitive.cfml"
            },
            "5": {
              "name": "entity.name.type.object.cfml"
            },
            "6": {
              "name": "entity.name.type.object.array.cfml"
            },
            "7": {
              "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.begin.cfml"
            },
            "8": {
              "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.end.cfml"
            },
            "9": {
              "name": "storage.type.function.cfml"
            },
            "10": {
              "name": "entity.name.function.constructor.cfml"
            },
            "11": {
              "name": "entity.name.function.cfml"
            }
          },
          "end": "\\}|(?=;)",
          "endCaptures": {
            "0": {
              "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-function-declaration-parameters"
            },
            {
              "name": "meta.function.body.cfml",
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.block.begin.cfml"
                }
              },
              "end": "(?=\\})",
              "patterns": [
                {
                  "include": "#source-cfml-script-statements"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?=(([_$a-zA-Z][$\\w]*)\\s*(\\.)\\s*)+([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(\\bfunction\\b|(\\b[_$a-zA-Z][$\\w]*|\\([^\\(]*?\\))\\s*=>\\s*\\{))",
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "meta.function.body.cfml",
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.block.begin.cfml"
                }
              },
              "end": "(?=\\})",
              "patterns": [
                {
                  "include": "#source-cfml-script-statements"
                }
              ]
            },
            {
              "include": "#source-cfml-script-arrow-function-declaration"
            },
            {
              "include": "#source-cfml-script-function-declaration"
            },
            {
              "name": "meta.function.declaration.cfml",
              "begin": "(?=[_$a-zA-Z][$\\w]*\\s*\\.)",
              "end": "(\\?\\.)|(\\.)",
              "endCaptures": {
                "1": {
                  "name": "punctuation.accessor.safe.cfml"
                },
                "2": {
                  "name": "punctuation.accessor.cfml"
                }
              },
              "patterns": [
                {
                  "include": "#source-cfml-script-cfml-scopes"
                },
                {
                  "name": "support.class.cfml",
                  "match": "[_$a-zA-Z][$\\w]*"
                }
              ]
            },
            {
              "name": "meta.function.declaration.cfml",
              "begin": "(?=[_$a-zA-Z][$\\w]*\\s*(=)\\s*)",
              "end": "\\s*(=)\\s*",
              "endCaptures": {
                "1": {
                  "name": "keyword.operator.assignment.cfml"
                }
              },
              "patterns": [
                {
                  "name": "meta.property.cfml entity.name.function.cfml",
                  "match": "[_$a-zA-Z][$\\w]*"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?=(([_$a-zA-Z][$\\w]*)\\s*(\\.)\\s*)+([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(\\b[_$a-zA-Z][$\\w]*|\\([^\\(]*?\\))\\s*=>)",
          "end": "(?=[);}\\],\\n])",
          "patterns": [
            {
              "include": "#source-cfml-script-arrow-function-declaration"
            },
            {
              "name": "meta.function.declaration.cfml",
              "begin": "(?=[_$a-zA-Z][$\\w]*\\s*\\.)",
              "end": "(\\?\\.)|(\\.)",
              "endCaptures": {
                "1": {
                  "name": "punctuation.accessor.safe.cfml"
                },
                "2": {
                  "name": "punctuation.accessor.cfml"
                }
              },
              "patterns": [
                {
                  "include": "#source-cfml-script-cfml-scopes"
                },
                {
                  "name": "support.class.cfml",
                  "match": "[_$a-zA-Z][$\\w]*"
                }
              ]
            },
            {
              "name": "meta.function.declaration.cfml",
              "begin": "(?=[_$a-zA-Z][$\\w]*\\s*(=)\\s*)",
              "end": "\\s*(=)\\s*",
              "endCaptures": {
                "1": {
                  "name": "keyword.operator.assignment.cfml"
                }
              },
              "patterns": [
                {
                  "name": "meta.property.cfml entity.name.function.cfml",
                  "match": "[_$a-zA-Z][$\\w]*"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(\\bfunction\\b|(\\b[_$a-zA-Z][$\\w]*|\\([^\\(]*?\\))\\s*=>\\s*\\{))",
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "meta.function.body.cfml",
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.block.begin.cfml"
                }
              },
              "end": "(?=\\})",
              "patterns": [
                {
                  "include": "#source-cfml-script-statements"
                }
              ]
            },
            {
              "include": "#source-cfml-script-arrow-function-declaration"
            },
            {
              "include": "#source-cfml-script-function-declaration"
            },
            {
              "name": "meta.function.declaration.cfml",
              "begin": "(?=[_$a-zA-Z][$\\w]*\\s*(=)\\s*)",
              "end": "\\s*(=)\\s*",
              "endCaptures": {
                "1": {
                  "name": "keyword.operator.assignment.cfml"
                }
              },
              "patterns": [
                {
                  "name": "variable.other.constant.cfml entity.name.function.cfml",
                  "match": "[_$A-Z][_$\\dA-Z]*"
                },
                {
                  "name": "variable.other.readwrite.cfml entity.name.function.cfml",
                  "match": "[_$a-zA-Z][$\\w]*"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(\\b[_$a-zA-Z][$\\w]*|\\([^\\(]*?\\))\\s*=>)",
          "end": "(?=[);}\\],\\n])",
          "patterns": [
            {
              "include": "#source-cfml-script-arrow-function-declaration"
            },
            {
              "name": "meta.function.declaration.cfml",
              "begin": "(?=[_$a-zA-Z][$\\w]*\\s*(=)\\s*)",
              "end": "\\s*(=)\\s*",
              "endCaptures": {
                "1": {
                  "name": "keyword.operator.assignment.cfml"
                }
              },
              "patterns": [
                {
                  "name": "variable.other.constant.cfml entity.name.function.cfml",
                  "match": "[_$A-Z][_$\\dA-Z]*"
                },
                {
                  "name": "variable.other.readwrite.cfml entity.name.function.cfml",
                  "match": "[_$a-zA-Z][$\\w]*"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?=\\s*\\bfunction\\b\\s+[_$a-zA-Z][$\\w]*)",
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "meta.function.body.cfml",
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.block.begin.cfml"
                }
              },
              "end": "(?=\\})",
              "patterns": [
                {
                  "include": "#source-cfml-script-statements"
                }
              ]
            },
            {
              "include": "#source-cfml-script-function-declaration"
            }
          ]
        }
      ]
    },
    "source-cfml-script-function-declaration": {
      "comment": "Breaks simple interface function declarations",
      "begin": "(?=\\s*\\bfunction\\b)",
      "end": "(?=\\{)",
      "patterns": [
        {
          "match": "\\b(function)\\b\\s*",
          "captures": {
            "0": {
              "name": "meta.function.declaration.cfml"
            },
            "1": {
              "name": "storage.type.function.cfml"
            }
          }
        },
        {
          "name": "meta.function.declaration.cfml entity.name.function.cfml",
          "match": "[_$a-zA-Z][$\\w]*"
        },
        {
          "include": "#source-cfml-script-function-declaration-parameters"
        }
      ]
    },
    "source-cfml-script-component-attributes": {
      "patterns": [
        {
          "include": "#source-cfml-extends"
        },
        {
          "include": "#source-cfml-script-tag-generic-attribute"
        }
      ]
    },
    "source-cfml-script-string-quoted-double": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "string.quoted.double.cfml punctuation.definition.string.begin.cfml"
        }
      },
      "end": "(\")(?!\")",
      "endCaptures": {
        "1": {
          "name": "string.quoted.double.cfml punctuation.definition.string.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "string.quoted.double.cfml constant.character.escape.quote.cfml",
          "match": "\"\""
        },
        {
          "name": "meta.string.quoted.double.cfml meta.embedded.block.sql source.sql",
          "begin": "(?=\\s*(?:USE|SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|REPLACE|ALTER|WITH|DECLARE|FROM|WHERE|AND|OR|NOT|EXISTS|ORDER\\s+BY|GROUP\\s+BY|HAVING|(INNER|CROSS)\\s+JOIN|(LEFT|RIGHT|FULL)(\\s+OUTER)?\\s+JOIN|UNION|INTERSECT|EXCEPT|MINUS|LIMIT|TRUNCATE\\s+TABLE|BULK\\s+INSERT)\\b)",
          "end": "(?=\"[^\"])",
          "patterns": [
            {
              "name": "constant.character.escape.quote.cfml",
              "match": "\"\""
            },
            {
              "include": "#source-cfml-sql-string-double-quoted"
            }
          ]
        },
        {
          "name": "string.quoted.double.cfml",
          "begin": "(?=\\S)",
          "end": "(?=\"[^\"])",
          "patterns": [
            {
              "name": "constant.character.escape.quote.cfml",
              "match": "\"\""
            },
            {
              "include": "#source-cfml-script-hash-delimiters"
            }
          ]
        },
        {
          "name": "string.quoted.double.cfml",
          "match": "[\\s\\n]"
        }
      ]
    },
    "source-cfml-script-statements": {
      "patterns": [
        {
          "include": "#source-cfml-script-conditional"
        },
        {
          "include": "#source-cfml-script-static"
        },
        {
          "include": "#source-cfml-script-decl-block"
        },
        {
          "include": "#source-cfml-script-tag-in-script"
        },
        {
          "include": "#source-cfml-script-tag-in-script-cf"
        },
        {
          "include": "#source-cfml-script-expressions"
        },
        {
          "include": "#source-cfml-script-string"
        },
        {
          "include": "#source-cfml-script-comments"
        }
      ]
    },
    "source-cfml-script-keywords": {
      "patterns": [
        {
          "name": "keyword.control.throw.cfml",
          "match": "(?i)\\b(throw|rethrow)\\b(?!\\()"
        },
        {
          "name": "keyword.control.loop.cfml",
          "match": "(?i)(?<!\\.)\\b(break|continue)\\b"
        },
        {
          "name": "keyword.control.flow.cfml",
          "match": "(?i)(?<!\\.)\\b(abort)\\b"
        },
        {
          "begin": "(?i)(?<!\\.)\\b(return)\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.flow.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "name": "storage.modifier.cfml",
          "match": "(?i)\\bfinal\\b"
        },
        {
          "name": "storage.type.cfml",
          "match": "(?i)\\bvar\\b"
        }
      ]
    }
  }
}